{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"LANfactory","text":"<p>Lightweight python package to help with training LANs (Likelihood approximation networks). </p>"},{"location":"#quick-start","title":"Quick Start","text":"<p>The <code>LANfactory</code> package is a light-weight convenience package for training <code>likelihood approximation networks</code> (LANs) in torch (or keras),  starting from supplied training data.</p> <p>LANs, although more general in potential scope of applications, were conceived in the context of sequential sampling modeling to account for cognitive processes giving rise to choice and reaction time data in n-alternative forced choice experiments commonly encountered in the cognitive sciences.</p> <p>In this quick tutorial we will use the <code>ssms</code> package to generate our training data using such a sequential sampling model (SSM). The use is in no way bound to utilize the <code>ssms</code> package.</p>"},{"location":"#install","title":"Install","text":"<p>To install the <code>ssms</code> package type,</p> <p><code>pip install git+https://github.com/AlexanderFengler/ssm_simulators</code></p> <p>To install the <code>LANfactory</code> package type,</p> <p><code>pip install git+https://github.com/AlexanderFengler/LANfactory</code></p> <p>Necessary dependency should be installed automatically in the process.</p>"},{"location":"#basic-tutorial","title":"Basic Tutorial","text":"<pre><code># Load necessary packages\nimport ssms\nimport lanfactory \nimport os\nimport numpy as np\nfrom copy import deepcopy\nimport torch\n</code></pre>"},{"location":"#generate-training-data","title":"Generate Training Data","text":"<p>First we need to generate some training data. As mentioned above we will do so using the <code>ssms</code> python package, however without delving into a detailed explanation of this package. Please refer to the [basic ssms tutorial] (https://github.com/AlexanderFengler/ssm_simulators) in case you want to learn more.</p> <pre><code># MAKE CONFIGS\n# Initialize the generator config (for MLP LANs)\ngenerator_config = deepcopy(ssms.config.data_generator_config['lan']['mlp'])\n# Specify generative model (one from the list of included models mentioned above)\ngenerator_config['dgp_list'] = 'angle' \n# Specify number of parameter sets to simulate\ngenerator_config['n_parameter_sets'] = 100 \n# Specify how many samples a simulation run should entail\ngenerator_config['n_samples'] = 1000\n# Specify folder in which to save generated data\ngenerator_config['output_folder'] = 'data/lan_mlp/'\n# Make model config dict\nmodel_config = ssms.config.model_config['angle']\n</code></pre> <pre><code># MAKE DATA\nmy_dataset_generator = ssms.dataset_generators.data_generator(generator_config = generator_config,\nmodel_config = model_config)\ntraining_data = my_dataset_generator.generate_data_training_uniform(save = True)\n</code></pre> <pre><code>n_cpus used:  6\nchecking:  data/lan_mlp/\nsimulation round: 1  of 10\nsimulation round: 2  of 10\nsimulation round: 3  of 10\nsimulation round: 4  of 10\nsimulation round: 5  of 10\nsimulation round: 6  of 10\nsimulation round: 7  of 10\nsimulation round: 8  of 10\nsimulation round: 9  of 10\nsimulation round: 10  of 10\nWriting to file:  data/lan_mlp/training_data_0_nbins_0_n_1000/angle/training_data_angle_ef5b9e0eb76c11eca684acde48001122.pickle\n</code></pre>"},{"location":"#prepare-for-training","title":"Prepare for Training","text":"<p>Next we set up dataloaders for training with pytorch. The <code>LANfactory</code> uses custom dataloaders, taking into account particularities of the expected training data. Specifically, we expect to receive a bunch of training data files (the present example generates only one), where each file hosts a large number of training examples.  So we want to define a dataloader which spits out batches from data with a specific training data file, and keeps checking when to load in a new file.  The way this is implemented here, is via the <code>DatasetTorch</code> class in <code>lanfactory.trainers</code>, which inherits from <code>torch.utils.data.Dataset</code> and prespecifies a <code>batch_size</code>. Finally this is supplied to a <code>DataLoader</code>, for which we keep the <code>batch_size</code> argument at 0.</p> <p>The <code>DatasetTorch</code> class is then called as an iterator via the DataLoader and takes care of batching as well as file loading internally. </p> <p>You may choose your own way of defining the <code>DataLoader</code> classes, downstream you are simply expected to supply one.</p> <pre><code># MAKE DATALOADERS\n# List of datafiles (here only one)\nfolder_ = 'data/lan_mlp/training_data_0_nbins_0_n_1000/angle/'\nfile_list_ = [folder_ + file_ for file_ in os.listdir(folder_)]\n# Training dataset\ntorch_training_dataset = lanfactory.trainers.DatasetTorch(file_IDs = file_list_,\nbatch_size = 128)\ntorch_training_dataloader = torch.utils.data.DataLoader(torch_training_dataset,\nshuffle = True,\nbatch_size = None,\nnum_workers = 1,\npin_memory = True)\n# Validation dataset\ntorch_validation_dataset = lanfactory.trainers.DatasetTorch(file_IDs = file_list_,\nbatch_size = 128)\ntorch_validation_dataloader = torch.utils.data.DataLoader(torch_validation_dataset,\nshuffle = True,\nbatch_size = None,\nnum_workers = 1,\npin_memory = True)\n</code></pre> <p>Now we define two configuration dictionariers,</p> <ol> <li>The <code>network_config</code> dictionary defines the architecture and properties of the network</li> <li>The <code>train_config</code> dictionary defines properties concerning training hyperparameters</li> </ol> <p>Two examples (which we take as provided by the package, but which you can adjust according to your needs) are provided below.</p> <pre><code># SPECIFY NETWORK CONFIGS AND TRAINING CONFIGS\nnetwork_config = lanfactory.config.network_configs.network_config_mlp\nprint('Network config: ')\nprint(network_config)\ntrain_config = lanfactory.config.network_configs.train_config_mlp\nprint('Train config: ')\nprint(train_config)\n</code></pre> <pre><code>Network config: \n{'layer_types': ['dense', 'dense', 'dense'], 'layer_sizes': [100, 100, 1], 'activations': ['tanh', 'tanh', 'linear'], 'loss': ['huber'], 'callbacks': ['checkpoint', 'earlystopping', 'reducelr']}\nTrain config: \n{'batch_size': 128, 'n_epochs': 10, 'optimizer': 'adam', 'learning_rate': 0.002, 'loss': 'huber', 'save_history': True, 'metrics': [&lt;keras.losses.MeanSquaredError object at 0x12c403d30&gt;, &lt;keras.losses.Huber object at 0x12c1c78e0&gt;], 'callbacks': ['checkpoint', 'earlystopping', 'reducelr']}\n</code></pre> <p>We can now load a network, and save the configuration files for convenience.</p> <pre><code># LOAD NETWORK\nnet = lanfactory.trainers.TorchMLP(network_config = deepcopy(network_config),\ninput_shape = torch_training_dataset.input_dim,\nsave_folder = '/data/torch_models/',\ngenerative_model_id = 'angle')\n# SAVE CONFIGS\nlanfactory.utils.save_configs(model_id = net.model_id + '_torch_',\nsave_folder = 'data/torch_models/angle/', \nnetwork_config = network_config, \ntrain_config = train_config, \nallow_abs_path_folder_generation = True)\n</code></pre> <p>To finally train the network we supply our network, the dataloaders and training config to the <code>ModelTrainerTorchMLP</code> class, from <code>lanfactory.trainers</code>.</p> <pre><code># TRAIN MODEL\nmodel_trainer.train_model(save_history = True,\nsave_model = True,\nverbose = 0)\n</code></pre> <pre><code>Epoch took 0 / 10,  took 11.54538607597351 seconds\nepoch 0 / 10, validation_loss: 0.3431\nEpoch took 1 / 10,  took 13.032279014587402 seconds\nepoch 1 / 10, validation_loss: 0.2732\nEpoch took 2 / 10,  took 12.421074867248535 seconds\nepoch 2 / 10, validation_loss: 0.1941\nEpoch took 3 / 10,  took 12.097641229629517 seconds\nepoch 3 / 10, validation_loss: 0.2028\nEpoch took 4 / 10,  took 12.030233144760132 seconds\nepoch 4 / 10, validation_loss: 0.184\nEpoch took 5 / 10,  took 12.695374011993408 seconds\nepoch 5 / 10, validation_loss: 0.1433\nEpoch took 6 / 10,  took 12.177874326705933 seconds\nepoch 6 / 10, validation_loss: 0.1115\nEpoch took 7 / 10,  took 11.908828258514404 seconds\nepoch 7 / 10, validation_loss: 0.1084\nEpoch took 8 / 10,  took 12.066670179367065 seconds\nepoch 8 / 10, validation_loss: 0.0864\nEpoch took 9 / 10,  took 12.37562108039856 seconds\nepoch 9 / 10, validation_loss: 0.07484\nSaving training history\nSaving model state dict\nTraining finished successfully...\n</code></pre>"},{"location":"#load-model-for-inference-and-call","title":"Load Model for Inference and Call","text":"<p>The <code>LANfactory</code> provides some convenience functions to use networks for inference after training.  We can load a model using the <code>LoadTorchMLPInfer</code> class, which then allows us to run fast inference via either a direct call, which expects a <code>torch.tensor</code> as input, or the <code>predict_on_batch</code> method, which expects a <code>numpy.array</code>  of <code>dtype</code>, <code>np.float32</code>. </p> <pre><code>network_path_list = os.listdir('data/torch_models/angle')\nnetwork_file_path = ['data/torch_models/angle/' + file_ for file_ in network_path_list if 'state_dict' in file_][0]\nnetwork = lanfactory.trainers.LoadTorchMLPInfer(model_file_path = network_file_path,\nnetwork_config = network_config,\ninput_dim = torch_training_dataset.input_dim)\n</code></pre> <pre><code># Two ways to call the network\n# Direct call --&gt; need tensor input\ndirect_out = network(torch.from_numpy(np.array([1, 1.5, 0.5, 1.0, 0.1, 0.65, 1], dtype  = np.float32)))\nprint('direct call out: ', direct_out)\n# predict_on_batch method\npredict_on_batch_out = network.predict_on_batch(np.array([1, 1.5, 0.5, 1.0, 0.1, 0.65, 1], dtype  = np.float32))\nprint('predict_on_batch out: ', predict_on_batch_out)\n</code></pre> <pre><code>direct call out:  tensor([-16.4997])\npredict_on_batch out:  [-16.499687]\n</code></pre>"},{"location":"#a-peek-into-the-first-passage-distribution-computed-by-the-network","title":"A peek into the first passage distribution computed by the network","text":"<p>We can compare the learned likelihood function in our <code>network</code> with simulation data from the underlying generative model. For this purpose we recruit the <code>ssms</code> package again.</p> <pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\ndata = pd.DataFrame(np.zeros((2000, 7), dtype = np.float32), columns = ['v', 'a', 'z', 't', 'theta', 'rt', 'choice'])\ndata['v'] = 0.5\ndata['a'] = 0.75\ndata['z'] = 0.5\ndata['t'] = 0.2\ndata['theta'] = 0.1\ndata['rt'].iloc[:1000] = np.linspace(5, 0, 1000)\ndata['rt'].iloc[1000:] = np.linspace(0, 5, 1000)\ndata['choice'].iloc[:1000] = -1\ndata['choice'].iloc[1000:] = 1\n# Network predictions\npredict_on_batch_out = network.predict_on_batch(data.values.astype(np.float32))\n# Simulations\nfrom ssms.basic_simulators import simulator\nsim_out = simulator(model = 'angle', \ntheta = data.values[0, :-2],\nn_samples = 2000)\n</code></pre> <pre><code># Plot network predictions\nplt.plot(data['rt'] * data['choice'], np.exp(predict_on_batch_out), color = 'black', label = 'network')\n# Plot simulations\nplt.hist(sim_out['rts'] * sim_out['choices'], bins = 30, histtype = 'step', label = 'simulations', color = 'blue', density  = True)\nplt.legend()\nplt.title('SSM likelihood')\nplt.xlabel('rt')\nplt.ylabel('likelihod')\n</code></pre> <pre><code>Text(0, 0.5, 'likelihod')\n</code></pre> <p></p>"},{"location":"#torchmlp-to-onnx-converter","title":"TorchMLP to ONNX Converter","text":"<p>The <code>transform_onnx.py</code> script converts a TorchMLP model to the ONNX format. It takes a network configuration file (in pickle format), a state dictionary file (Torch model weights), the size of the input tensor, and the desired output ONNX file path.</p>"},{"location":"#usage","title":"Usage","text":"<p><code>python onnx/transform_onnx.py &lt;network_config_file&gt; &lt;state_dict_file&gt; &lt;input_shape&gt; &lt;output_onnx_file&gt;</code></p> <p>Replace the placeholders with the appropriate values:</p> <ul> <li>: Path to the pickle file containing the network configuration. <li>: Path to the file containing the state dictionary of the model. <li>: The size of the input tensor for the model (integer). <li>: Path to the output ONNX file. <p>For example:</p> <p><pre><code>python onnx/transform_onnx.py '0d9f0e94175b11eca9e93cecef057438_lca_no_bias_4_torch__network_config.pickle' '0d9f0e94175b11eca9e93cecef057438_lca_no_bias_4_torch_state_dict.pt' 11 'lca_no_bias_4_torch.onnx'\n</code></pre> This onnx file can be used directly with the <code>HSSM</code> package. </p> <p>We hope this package may be helpful in case you attempt to train LANs for your own research.</p>"},{"location":"#end","title":"END","text":""},{"location":"api/config/","title":"config","text":""},{"location":"api/config/#lanfactory.config.network_configs","title":"lanfactory.config.network_configs","text":"<p>This Module defines simple examples for network and training configurations that serve as inputs to the training classes in the package.</p>"},{"location":"api/lanfactory/","title":"lanfactory","text":""},{"location":"api/lanfactory/#lanfactory.config","title":"lanfactory.config","text":""},{"location":"api/lanfactory/#lanfactory.config.network_configs","title":"network_configs","text":"<p>This Module defines simple examples for network and training configurations that serve as inputs to the training classes in the package.</p>"},{"location":"api/lanfactory/#lanfactory.onnx","title":"lanfactory.onnx","text":""},{"location":"api/lanfactory/#lanfactory.onnx.transform_onnx","title":"transform_onnx","text":""},{"location":"api/lanfactory/#lanfactory.onnx.transform_onnx.transform_to_onnx","title":"transform_to_onnx","text":"<pre><code>transform_to_onnx(\nnetwork_config_file,\nstate_dict_file,\ninput_shape,\noutput_onnx_file,\n)\n</code></pre> <p>Transforms a TorchMLP model to ONNX format.</p>"},{"location":"api/lanfactory/#lanfactory.onnx.transform_onnx.transform_to_onnx--arguments","title":"Arguments","text":"<pre><code>network_config_file (str):\n    Path to the pickle file containing the network configuration.\nstate_dict_file (str):\n    Path to the file containing the state dictionary of the model.\ninput_shape (int):\n    The size of the input tensor for the model.\noutput_onnx_file (str):\n    Path to the output ONNX file.\n</code></pre>"},{"location":"api/lanfactory/#lanfactory.onnx.transform_to_onnx","title":"transform_to_onnx","text":"<pre><code>transform_to_onnx(\nnetwork_config_file,\nstate_dict_file,\ninput_shape,\noutput_onnx_file,\n)\n</code></pre> <p>Transforms a TorchMLP model to ONNX format.</p>"},{"location":"api/lanfactory/#lanfactory.onnx.transform_to_onnx--arguments","title":"Arguments","text":"<pre><code>network_config_file (str):\n    Path to the pickle file containing the network configuration.\nstate_dict_file (str):\n    Path to the file containing the state dictionary of the model.\ninput_shape (int):\n    The size of the input tensor for the model.\noutput_onnx_file (str):\n    Path to the output ONNX file.\n</code></pre>"},{"location":"api/lanfactory/#lanfactory.trainers","title":"lanfactory.trainers","text":""},{"location":"api/lanfactory/#lanfactory.trainers.DatasetTorch","title":"DatasetTorch","text":"<pre><code>DatasetTorch(\nfile_ids,\nbatch_size=32,\nlabel_lower_bound=None,\nlabel_upper_bound=None,\nfeatures_key=\"data\",\nlabel_key=\"labels\",\nout_framework=\"torch\",\n)\n</code></pre> <p>             Bases: <code>Dataset</code></p> <p>Dataset class for TorchMLP training.</p>"},{"location":"api/lanfactory/#lanfactory.trainers.DatasetTorch--arguments","title":"Arguments","text":"<pre><code>file_ids (list):\n    List of paths to the data files.\nbatch_size (int):\n    Batch size.\nlabel_lower_bound (float):\n    Lower bound for the labels.\nlabel_upper_bound (float):\n    Upper bound for the labels.\nfeatures_key (str):\n    Key for the features in the data files.\nlabel_key (str):\n    Key for the labels in the data files.\nout_framework (str):\n    Output framework.\n</code></pre>"},{"location":"api/lanfactory/#lanfactory.trainers.LoadTorchMLP","title":"LoadTorchMLP","text":"<pre><code>LoadTorchMLP(\nmodel_file_path=None,\nnetwork_config=None,\ninput_dim=None,\n)\n</code></pre> <p>Class to load TorchMLP models.</p>"},{"location":"api/lanfactory/#lanfactory.trainers.LoadTorchMLP--arguments","title":"Arguments","text":"<pre><code>model_file_path (str):\n    Path to the model file.\nnetwork_config (dict):\n    Network configuration.\ninput_dim (int):\n    Input dimension.\n</code></pre>"},{"location":"api/lanfactory/#lanfactory.trainers.LoadTorchMLPInfer","title":"LoadTorchMLPInfer","text":"<pre><code>LoadTorchMLPInfer(\nmodel_file_path=None,\nnetwork_config=None,\ninput_dim=None,\n)\n</code></pre> <p>Class to load TorchMLP models for inference. (This was originally useful directly for application in the HDDM toolbox).</p>"},{"location":"api/lanfactory/#lanfactory.trainers.LoadTorchMLPInfer--arguments","title":"Arguments","text":"<pre><code>model_file_path (str):\n    Path to the model file.\nnetwork_config (dict):\n    Network configuration.\ninput_dim (int):\n    Input dimension.\n</code></pre>"},{"location":"api/lanfactory/#lanfactory.trainers.LoadTorchMLPInfer.predict_on_batch","title":"predict_on_batch","text":"<pre><code>predict_on_batch(x=None)\n</code></pre> <p>Intended as function that computes trial wise log-likelihoods from a matrix input. To be used primarily through the HDDM toolbox.</p>"},{"location":"api/lanfactory/#lanfactory.trainers.LoadTorchMLPInfer.predict_on_batch--arguments","title":"Arguments","text":"<pre><code>x (numpy.ndarray(dtype=numpy.float32)):\n    Matrix which will be passed through the network.\n    LANs expect the matrix columns to follow a specific order.\n    When used in HDDM, x will be passed as follows.\n    The first few columns are trial wise model parameters\n    (order specified in the model_config file under the 'params' key).\n    The last two columns are filled with trial wise\n    reaction times and choices.\n    When not used via HDDM, no such restriction applies.\n</code></pre>"},{"location":"api/lanfactory/#lanfactory.trainers.LoadTorchMLPInfer.predict_on_batch--output","title":"Output","text":"<pre><code>numpy.ndarray(dtype = numpy.float32):\n    Output of the network. When called through HDDM,\n    this is expected as trial-wise log likelihoods\n    of a given generative model.\n</code></pre>"},{"location":"api/lanfactory/#lanfactory.trainers.MLPJax","title":"MLPJax","text":"<p>             Bases: <code>Module</code></p> <p>JaxMLP class. Arguments</p> <pre><code>layer_sizes (Sequence[int]):\n    Sequence of integers containing the sizes of the layers.\nactivations (Sequence[str]):\n    Sequence of strings containing the activation functions.\ntrain (bool):\n    Whether the model should be set to training mode or not.\ntrain_output_type (str):\n    The output type of the model during training.\n</code></pre>"},{"location":"api/lanfactory/#lanfactory.trainers.MLPJax.__call__","title":"__call__","text":"<pre><code>__call__(inputs)\n</code></pre> <p>Call function for the JaxMLP class. Performs forward pass through the network.</p>"},{"location":"api/lanfactory/#lanfactory.trainers.MLPJax.__call__--arguments","title":"Arguments","text":"<pre><code>inputs (jax.numpy.ndarray):\n    Input tensor.\n</code></pre> <p>Returns:</p> <ul> <li> <code>    jax.numpy.ndarray:</code>         \u2013          <p>Output tensor.</p> </li> </ul>"},{"location":"api/lanfactory/#lanfactory.trainers.MLPJax.load_state_from_file","title":"load_state_from_file","text":"<pre><code>load_state_from_file(seed=42, input_dim=6, file_path=None)\n</code></pre> <p>Loads the state dictionary from a file.</p>"},{"location":"api/lanfactory/#lanfactory.trainers.MLPJax.load_state_from_file--arguments","title":"Arguments","text":"<pre><code>seed (int):\n    Seed for the random number generator.\ninput_dim (int):\n    Dimension of the input tensor.\nfile_path (str):\n    Path to the file containing the state dictionary.\n</code></pre> <p>Returns:</p> <ul> <li> <code>    flax.core.frozen_dict.FrozenDict:</code>         \u2013          <p>The state dictionary.</p> </li> </ul>"},{"location":"api/lanfactory/#lanfactory.trainers.MLPJax.make_forward_partial","title":"make_forward_partial","text":"<pre><code>make_forward_partial(\nseed=42,\ninput_dim=6,\nstate_dict_from_file=True,\nstate=None,\nfile_path=None,\nadd_jitted=False,\n)\n</code></pre> <p>Creates a partial function for the forward pass of the network.</p>"},{"location":"api/lanfactory/#lanfactory.trainers.MLPJax.make_forward_partial--arguments","title":"Arguments","text":"<pre><code>seed (int):\n    Seed for the random number generator.\ninput_dim (int):\n    Dimension of the input tensor.\nstate_dict_from_file (bool):\n    Whether the state dictionary should be loaded from a file or not.\nstate (flax.core.frozen_dict.FrozenDict):\n    The state dictionary (if not loaded from file).\nfile_path (str):\n    Path to the file containing the state dictionary (if loaded from file).\nadd_jitted (bool):\n    Whether the partial function should be jitted or not.\n</code></pre> <p>Returns:</p> <ul> <li> <code>    Callable:</code>         \u2013          <p>The partial function for the forward pass of the network.</p> </li> </ul>"},{"location":"api/lanfactory/#lanfactory.trainers.MLPJax.setup","title":"setup","text":"<pre><code>setup()\n</code></pre> <p>Setup function for the JaxMLP class. Initializes the layers and activation functions.</p>"},{"location":"api/lanfactory/#lanfactory.trainers.MLPJaxFactory","title":"MLPJaxFactory","text":"<pre><code>MLPJaxFactory(network_config={}, train=True)\n</code></pre> <p>Factory function to create a MLPJax object. Arguments</p> <pre><code>network_config (dict):\n    Dictionary containing the network configuration.\ntrain (bool):\n    Whether the model should be trained or not.\n</code></pre> <p>Returns:</p> <ul> <li> <code>    MLPJax class initialized with the correct network configuration.</code>         \u2013          </li> </ul>"},{"location":"api/lanfactory/#lanfactory.trainers.ModelTrainerJaxMLP","title":"ModelTrainerJaxMLP","text":"<pre><code>ModelTrainerJaxMLP(\ntrain_config=None,\nmodel=None,\ntrain_dl=None,\nvalid_dl=None,\nallow_abs_path_folder_generation=False,\npin_memory=False,\nseed=None,\n)\n</code></pre>"},{"location":"api/lanfactory/#lanfactory.trainers.ModelTrainerJaxMLP--arguments","title":"Arguments","text":"<pre><code>train_config (dict):\n    Dictionary containing the training configuration.\nmodel (MLPJax):\n    The MLPJax model to be trained.\ntrain_dl (torch.utils.data.DataLoader):\n    The training data loader.\nvalid_dl (torch.utils.data.DataLoader):\n    The validation data loader.\nallow_abs_path_folder_generation (bool):\n    Whether the folder for the output files should be created or not.\npin_memory (bool):\n    Whether the data loader should pin memory or not.\nseed (int):\n    Seed for the random number generator.\n</code></pre> <p>Returns:</p> <ul> <li> <code>    ModelTrainerJaxMLP:</code>         \u2013          <p>The ModelTrainerJaxMLP object.</p> </li> </ul>"},{"location":"api/lanfactory/#lanfactory.trainers.ModelTrainerJaxMLP.__get_loss","title":"__get_loss","text":"<pre><code>__get_loss()\n</code></pre> <p>Define loss function.</p>"},{"location":"api/lanfactory/#lanfactory.trainers.ModelTrainerJaxMLP.__make_apply_model","title":"__make_apply_model","text":"<pre><code>__make_apply_model(train=True)\n</code></pre> <p>Compile forward pass with loss aplication</p>"},{"location":"api/lanfactory/#lanfactory.trainers.ModelTrainerJaxMLP.__make_update_model","title":"__make_update_model","text":"<pre><code>__make_update_model()\n</code></pre> <p>Compile gradient application</p>"},{"location":"api/lanfactory/#lanfactory.trainers.ModelTrainerJaxMLP.__try_wandb","title":"__try_wandb","text":"<pre><code>__try_wandb(\nwandb_project_id=\"projectid\",\nfile_id=\"fileid\",\nrun_id=\"runid\",\n)\n</code></pre> <p>Helper function to initialize wandb</p>"},{"location":"api/lanfactory/#lanfactory.trainers.ModelTrainerJaxMLP.__try_wandb--arguments","title":"Arguments","text":"<pre><code>wandb_project_id (str):\n    The wandb project id.\nfile_id (str):\n    The file id.\nrun_id (str):\n    The run id.\n</code></pre>"},{"location":"api/lanfactory/#lanfactory.trainers.ModelTrainerJaxMLP.create_train_state","title":"create_train_state","text":"<pre><code>create_train_state(rng)\n</code></pre> <p>Create initial train state</p>"},{"location":"api/lanfactory/#lanfactory.trainers.ModelTrainerJaxMLP.run_epoch","title":"run_epoch","text":"<pre><code>run_epoch(\nstate, train=True, verbose=1, epoch=0, max_epochs=0\n)\n</code></pre> <p>Run one epoch of training or validation Arguments</p> <pre><code>state (flax.core.frozen_dict.FrozenDict):\n    The state dictionary.\ntrain (bool):\n    Whether the model should is in training mode or not.\nverbose (int):\n    The verbosity level.\nepoch (int):\n    The current epoch.\nmax_epochs (int):\n    The maximum number of epochs.\n</code></pre> <p>Returns:</p> <ul> <li> <code>    tuple (flax.core.frozen_dict.FrozenDict, float):</code>         \u2013          <p>The state dictionary and the mean epoch loss.</p> </li> </ul>"},{"location":"api/lanfactory/#lanfactory.trainers.ModelTrainerJaxMLP.train_and_evaluate","title":"train_and_evaluate","text":"<pre><code>train_and_evaluate(\noutput_folder=\"data/\",\noutput_file_id=\"fileid\",\nrun_id=\"runid\",\nwandb_on=True,\nwandb_project_id=\"projectid\",\nsave_history=True,\nsave_model=True,\nsave_config=True,\nsave_all=True,\nsave_data_details=True,\nverbose=1,\n)\n</code></pre> <p>Train and evaluate JAXMLP model. Arguments</p> <pre><code>output_folder (str):\n    Path to the output folder.\noutput_file_id (str):\n    The file id.\nrun_id (str):\n    The run id.\nwandb_on (bool):\n    Whether to use wandb or not.\nwandb_project_id (str):\n    Project id for wandb.\nsave_history (bool):\n    Whether to save the training history or not.\nsave_model (bool):\n    Whether to save the model or not.\nsave_config (bool):\n    Whether to save the training configuration or not.\nsave_all (bool):\n    Whether to save all files or not.\nsave_data_details (bool):\n    Whether to save the data details or not.\nverbose (int):\n    The verbosity level.\n</code></pre> <p>Returns:</p> <ul> <li> <code>    flax.core.frozen_dict.FrozenDict:</code>         \u2013          <p>The final state dictionary (model state).</p> </li> </ul>"},{"location":"api/lanfactory/#lanfactory.trainers.ModelTrainerTorchMLP","title":"ModelTrainerTorchMLP","text":"<pre><code>ModelTrainerTorchMLP(\ntrain_config=None,\nmodel=None,\ntrain_dl=None,\nvalid_dl=None,\nallow_abs_path_folder_generation=False,\npin_memory=True,\nseed=None,\n)\n</code></pre> <pre><code>train_config (dict):\n    Training configuration.\nmodel (TorchMLP):\n    TorchMLP model.\ntrain_dl (DatasetTorch):\n    Training dataloader.\nvalid_dl (DatasetTorch):\n    Validation dataloader.\nallow_abs_path_folder_generation (bool):\n    Whether to allow absolute path folder generation.\npin_memory (bool):\n    Whether to pin memory (dataloader). Can affect speed.\nseed (int):\n    Random seed.\n</code></pre>"},{"location":"api/lanfactory/#lanfactory.trainers.ModelTrainerTorchMLP.train_and_evaluate","title":"train_and_evaluate","text":"<pre><code>train_and_evaluate(\noutput_folder=\"data/\",\noutput_file_id=\"fileid\",\nrun_id=\"runid\",\nwandb_on=True,\nwandb_project_id=\"projectid\",\nsave_history=True,\nsave_model=True,\nsave_config=True,\nsave_all=True,\nsave_data_details=True,\nverbose=1,\n)\n</code></pre> <p>Train and evaluate the model.</p>"},{"location":"api/lanfactory/#lanfactory.trainers.ModelTrainerTorchMLP.train_and_evaluate--arguments","title":"Arguments","text":"<pre><code>output_folder (str):\n    Output folder.\noutput_file_id (str):\n    Output file ID.\nrun_id (str):\n    Run ID.\nwandb_on (bool):\n    Whether to use wandb.\nwandb_project_id (str):\n    Wandb project ID.\nsave_history (bool):\n    Whether to save the training history.\nsave_model (bool):\n    Whether to save the model.\nsave_config (bool):\n    Whether to save the training configuration.\nsave_all (bool):\n    Whether to save all.\nsave_data_details (bool):\n    Whether to save the data details.\nverbose (int):\n    Verbosity level.\n</code></pre>"},{"location":"api/lanfactory/#lanfactory.trainers.TorchMLP","title":"TorchMLP","text":"<pre><code>TorchMLP(network_config=None, input_shape=10, **kwargs)\n</code></pre> <p>             Bases: <code>Module</code></p> <p>TorchMLP class.</p>"},{"location":"api/lanfactory/#lanfactory.trainers.TorchMLP--arguments","title":"Arguments","text":"<pre><code>network_config (dict):\n    Network configuration.\ninput_shape (int):\n    Input shape.\n</code></pre>"},{"location":"api/lanfactory/#lanfactory.trainers.TorchMLP.forward","title":"forward","text":"<pre><code>forward(x)\n</code></pre> <p>Forward pass through network.</p>"},{"location":"api/lanfactory/#lanfactory.trainers.TorchMLP.forward--arguments","title":"Arguments","text":"<pre><code>x (torch.Tensor):\n    Input tensor.\n</code></pre> <p>Returns:</p> <ul> <li> <code>    torch.Tensor:</code>         \u2013          <p>Output tensor.</p> </li> </ul>"},{"location":"api/lanfactory/#lanfactory.trainers.jax_mlp","title":"jax_mlp","text":""},{"location":"api/lanfactory/#lanfactory.trainers.jax_mlp.MLPJax","title":"MLPJax","text":"<p>             Bases: <code>Module</code></p> <p>JaxMLP class. Arguments</p> <pre><code>layer_sizes (Sequence[int]):\n    Sequence of integers containing the sizes of the layers.\nactivations (Sequence[str]):\n    Sequence of strings containing the activation functions.\ntrain (bool):\n    Whether the model should be set to training mode or not.\ntrain_output_type (str):\n    The output type of the model during training.\n</code></pre>"},{"location":"api/lanfactory/#lanfactory.trainers.jax_mlp.MLPJax.__call__","title":"__call__","text":"<pre><code>__call__(inputs)\n</code></pre> <p>Call function for the JaxMLP class. Performs forward pass through the network.</p>"},{"location":"api/lanfactory/#lanfactory.trainers.jax_mlp.MLPJax.__call__--arguments","title":"Arguments","text":"<pre><code>inputs (jax.numpy.ndarray):\n    Input tensor.\n</code></pre> <p>Returns:</p> <ul> <li> <code>    jax.numpy.ndarray:</code>         \u2013          <p>Output tensor.</p> </li> </ul>"},{"location":"api/lanfactory/#lanfactory.trainers.jax_mlp.MLPJax.load_state_from_file","title":"load_state_from_file","text":"<pre><code>load_state_from_file(seed=42, input_dim=6, file_path=None)\n</code></pre> <p>Loads the state dictionary from a file.</p>"},{"location":"api/lanfactory/#lanfactory.trainers.jax_mlp.MLPJax.load_state_from_file--arguments","title":"Arguments","text":"<pre><code>seed (int):\n    Seed for the random number generator.\ninput_dim (int):\n    Dimension of the input tensor.\nfile_path (str):\n    Path to the file containing the state dictionary.\n</code></pre> <p>Returns:</p> <ul> <li> <code>    flax.core.frozen_dict.FrozenDict:</code>         \u2013          <p>The state dictionary.</p> </li> </ul>"},{"location":"api/lanfactory/#lanfactory.trainers.jax_mlp.MLPJax.make_forward_partial","title":"make_forward_partial","text":"<pre><code>make_forward_partial(\nseed=42,\ninput_dim=6,\nstate_dict_from_file=True,\nstate=None,\nfile_path=None,\nadd_jitted=False,\n)\n</code></pre> <p>Creates a partial function for the forward pass of the network.</p>"},{"location":"api/lanfactory/#lanfactory.trainers.jax_mlp.MLPJax.make_forward_partial--arguments","title":"Arguments","text":"<pre><code>seed (int):\n    Seed for the random number generator.\ninput_dim (int):\n    Dimension of the input tensor.\nstate_dict_from_file (bool):\n    Whether the state dictionary should be loaded from a file or not.\nstate (flax.core.frozen_dict.FrozenDict):\n    The state dictionary (if not loaded from file).\nfile_path (str):\n    Path to the file containing the state dictionary (if loaded from file).\nadd_jitted (bool):\n    Whether the partial function should be jitted or not.\n</code></pre> <p>Returns:</p> <ul> <li> <code>    Callable:</code>         \u2013          <p>The partial function for the forward pass of the network.</p> </li> </ul>"},{"location":"api/lanfactory/#lanfactory.trainers.jax_mlp.MLPJax.setup","title":"setup","text":"<pre><code>setup()\n</code></pre> <p>Setup function for the JaxMLP class. Initializes the layers and activation functions.</p>"},{"location":"api/lanfactory/#lanfactory.trainers.jax_mlp.MLPJaxFactory","title":"MLPJaxFactory","text":"<pre><code>MLPJaxFactory(network_config={}, train=True)\n</code></pre> <p>Factory function to create a MLPJax object. Arguments</p> <pre><code>network_config (dict):\n    Dictionary containing the network configuration.\ntrain (bool):\n    Whether the model should be trained or not.\n</code></pre> <p>Returns:</p> <ul> <li> <code>    MLPJax class initialized with the correct network configuration.</code>         \u2013          </li> </ul>"},{"location":"api/lanfactory/#lanfactory.trainers.jax_mlp.ModelTrainerJaxMLP","title":"ModelTrainerJaxMLP","text":"<pre><code>ModelTrainerJaxMLP(\ntrain_config=None,\nmodel=None,\ntrain_dl=None,\nvalid_dl=None,\nallow_abs_path_folder_generation=False,\npin_memory=False,\nseed=None,\n)\n</code></pre>"},{"location":"api/lanfactory/#lanfactory.trainers.jax_mlp.ModelTrainerJaxMLP--arguments","title":"Arguments","text":"<pre><code>train_config (dict):\n    Dictionary containing the training configuration.\nmodel (MLPJax):\n    The MLPJax model to be trained.\ntrain_dl (torch.utils.data.DataLoader):\n    The training data loader.\nvalid_dl (torch.utils.data.DataLoader):\n    The validation data loader.\nallow_abs_path_folder_generation (bool):\n    Whether the folder for the output files should be created or not.\npin_memory (bool):\n    Whether the data loader should pin memory or not.\nseed (int):\n    Seed for the random number generator.\n</code></pre> <p>Returns:</p> <ul> <li> <code>    ModelTrainerJaxMLP:</code>         \u2013          <p>The ModelTrainerJaxMLP object.</p> </li> </ul>"},{"location":"api/lanfactory/#lanfactory.trainers.jax_mlp.ModelTrainerJaxMLP.__get_loss","title":"__get_loss","text":"<pre><code>__get_loss()\n</code></pre> <p>Define loss function.</p>"},{"location":"api/lanfactory/#lanfactory.trainers.jax_mlp.ModelTrainerJaxMLP.__make_apply_model","title":"__make_apply_model","text":"<pre><code>__make_apply_model(train=True)\n</code></pre> <p>Compile forward pass with loss aplication</p>"},{"location":"api/lanfactory/#lanfactory.trainers.jax_mlp.ModelTrainerJaxMLP.__make_update_model","title":"__make_update_model","text":"<pre><code>__make_update_model()\n</code></pre> <p>Compile gradient application</p>"},{"location":"api/lanfactory/#lanfactory.trainers.jax_mlp.ModelTrainerJaxMLP.__try_wandb","title":"__try_wandb","text":"<pre><code>__try_wandb(\nwandb_project_id=\"projectid\",\nfile_id=\"fileid\",\nrun_id=\"runid\",\n)\n</code></pre> <p>Helper function to initialize wandb</p>"},{"location":"api/lanfactory/#lanfactory.trainers.jax_mlp.ModelTrainerJaxMLP.__try_wandb--arguments","title":"Arguments","text":"<pre><code>wandb_project_id (str):\n    The wandb project id.\nfile_id (str):\n    The file id.\nrun_id (str):\n    The run id.\n</code></pre>"},{"location":"api/lanfactory/#lanfactory.trainers.jax_mlp.ModelTrainerJaxMLP.create_train_state","title":"create_train_state","text":"<pre><code>create_train_state(rng)\n</code></pre> <p>Create initial train state</p>"},{"location":"api/lanfactory/#lanfactory.trainers.jax_mlp.ModelTrainerJaxMLP.run_epoch","title":"run_epoch","text":"<pre><code>run_epoch(\nstate, train=True, verbose=1, epoch=0, max_epochs=0\n)\n</code></pre> <p>Run one epoch of training or validation Arguments</p> <pre><code>state (flax.core.frozen_dict.FrozenDict):\n    The state dictionary.\ntrain (bool):\n    Whether the model should is in training mode or not.\nverbose (int):\n    The verbosity level.\nepoch (int):\n    The current epoch.\nmax_epochs (int):\n    The maximum number of epochs.\n</code></pre> <p>Returns:</p> <ul> <li> <code>    tuple (flax.core.frozen_dict.FrozenDict, float):</code>         \u2013          <p>The state dictionary and the mean epoch loss.</p> </li> </ul>"},{"location":"api/lanfactory/#lanfactory.trainers.jax_mlp.ModelTrainerJaxMLP.train_and_evaluate","title":"train_and_evaluate","text":"<pre><code>train_and_evaluate(\noutput_folder=\"data/\",\noutput_file_id=\"fileid\",\nrun_id=\"runid\",\nwandb_on=True,\nwandb_project_id=\"projectid\",\nsave_history=True,\nsave_model=True,\nsave_config=True,\nsave_all=True,\nsave_data_details=True,\nverbose=1,\n)\n</code></pre> <p>Train and evaluate JAXMLP model. Arguments</p> <pre><code>output_folder (str):\n    Path to the output folder.\noutput_file_id (str):\n    The file id.\nrun_id (str):\n    The run id.\nwandb_on (bool):\n    Whether to use wandb or not.\nwandb_project_id (str):\n    Project id for wandb.\nsave_history (bool):\n    Whether to save the training history or not.\nsave_model (bool):\n    Whether to save the model or not.\nsave_config (bool):\n    Whether to save the training configuration or not.\nsave_all (bool):\n    Whether to save all files or not.\nsave_data_details (bool):\n    Whether to save the data details or not.\nverbose (int):\n    The verbosity level.\n</code></pre> <p>Returns:</p> <ul> <li> <code>    flax.core.frozen_dict.FrozenDict:</code>         \u2013          <p>The final state dictionary (model state).</p> </li> </ul>"},{"location":"api/lanfactory/#lanfactory.trainers.torch_mlp","title":"torch_mlp","text":""},{"location":"api/lanfactory/#lanfactory.trainers.torch_mlp.DatasetTorch","title":"DatasetTorch","text":"<pre><code>DatasetTorch(\nfile_ids,\nbatch_size=32,\nlabel_lower_bound=None,\nlabel_upper_bound=None,\nfeatures_key=\"data\",\nlabel_key=\"labels\",\nout_framework=\"torch\",\n)\n</code></pre> <p>             Bases: <code>Dataset</code></p> <p>Dataset class for TorchMLP training.</p>"},{"location":"api/lanfactory/#lanfactory.trainers.torch_mlp.DatasetTorch--arguments","title":"Arguments","text":"<pre><code>file_ids (list):\n    List of paths to the data files.\nbatch_size (int):\n    Batch size.\nlabel_lower_bound (float):\n    Lower bound for the labels.\nlabel_upper_bound (float):\n    Upper bound for the labels.\nfeatures_key (str):\n    Key for the features in the data files.\nlabel_key (str):\n    Key for the labels in the data files.\nout_framework (str):\n    Output framework.\n</code></pre>"},{"location":"api/lanfactory/#lanfactory.trainers.torch_mlp.LoadTorchMLP","title":"LoadTorchMLP","text":"<pre><code>LoadTorchMLP(\nmodel_file_path=None,\nnetwork_config=None,\ninput_dim=None,\n)\n</code></pre> <p>Class to load TorchMLP models.</p>"},{"location":"api/lanfactory/#lanfactory.trainers.torch_mlp.LoadTorchMLP--arguments","title":"Arguments","text":"<pre><code>model_file_path (str):\n    Path to the model file.\nnetwork_config (dict):\n    Network configuration.\ninput_dim (int):\n    Input dimension.\n</code></pre>"},{"location":"api/lanfactory/#lanfactory.trainers.torch_mlp.LoadTorchMLPInfer","title":"LoadTorchMLPInfer","text":"<pre><code>LoadTorchMLPInfer(\nmodel_file_path=None,\nnetwork_config=None,\ninput_dim=None,\n)\n</code></pre> <p>Class to load TorchMLP models for inference. (This was originally useful directly for application in the HDDM toolbox).</p>"},{"location":"api/lanfactory/#lanfactory.trainers.torch_mlp.LoadTorchMLPInfer--arguments","title":"Arguments","text":"<pre><code>model_file_path (str):\n    Path to the model file.\nnetwork_config (dict):\n    Network configuration.\ninput_dim (int):\n    Input dimension.\n</code></pre>"},{"location":"api/lanfactory/#lanfactory.trainers.torch_mlp.LoadTorchMLPInfer.predict_on_batch","title":"predict_on_batch","text":"<pre><code>predict_on_batch(x=None)\n</code></pre> <p>Intended as function that computes trial wise log-likelihoods from a matrix input. To be used primarily through the HDDM toolbox.</p>"},{"location":"api/lanfactory/#lanfactory.trainers.torch_mlp.LoadTorchMLPInfer.predict_on_batch--arguments","title":"Arguments","text":"<pre><code>x (numpy.ndarray(dtype=numpy.float32)):\n    Matrix which will be passed through the network.\n    LANs expect the matrix columns to follow a specific order.\n    When used in HDDM, x will be passed as follows.\n    The first few columns are trial wise model parameters\n    (order specified in the model_config file under the 'params' key).\n    The last two columns are filled with trial wise\n    reaction times and choices.\n    When not used via HDDM, no such restriction applies.\n</code></pre>"},{"location":"api/lanfactory/#lanfactory.trainers.torch_mlp.LoadTorchMLPInfer.predict_on_batch--output","title":"Output","text":"<pre><code>numpy.ndarray(dtype = numpy.float32):\n    Output of the network. When called through HDDM,\n    this is expected as trial-wise log likelihoods\n    of a given generative model.\n</code></pre>"},{"location":"api/lanfactory/#lanfactory.trainers.torch_mlp.ModelTrainerTorchMLP","title":"ModelTrainerTorchMLP","text":"<pre><code>ModelTrainerTorchMLP(\ntrain_config=None,\nmodel=None,\ntrain_dl=None,\nvalid_dl=None,\nallow_abs_path_folder_generation=False,\npin_memory=True,\nseed=None,\n)\n</code></pre> <pre><code>train_config (dict):\n    Training configuration.\nmodel (TorchMLP):\n    TorchMLP model.\ntrain_dl (DatasetTorch):\n    Training dataloader.\nvalid_dl (DatasetTorch):\n    Validation dataloader.\nallow_abs_path_folder_generation (bool):\n    Whether to allow absolute path folder generation.\npin_memory (bool):\n    Whether to pin memory (dataloader). Can affect speed.\nseed (int):\n    Random seed.\n</code></pre>"},{"location":"api/lanfactory/#lanfactory.trainers.torch_mlp.ModelTrainerTorchMLP.train_and_evaluate","title":"train_and_evaluate","text":"<pre><code>train_and_evaluate(\noutput_folder=\"data/\",\noutput_file_id=\"fileid\",\nrun_id=\"runid\",\nwandb_on=True,\nwandb_project_id=\"projectid\",\nsave_history=True,\nsave_model=True,\nsave_config=True,\nsave_all=True,\nsave_data_details=True,\nverbose=1,\n)\n</code></pre> <p>Train and evaluate the model.</p>"},{"location":"api/lanfactory/#lanfactory.trainers.torch_mlp.ModelTrainerTorchMLP.train_and_evaluate--arguments","title":"Arguments","text":"<pre><code>output_folder (str):\n    Output folder.\noutput_file_id (str):\n    Output file ID.\nrun_id (str):\n    Run ID.\nwandb_on (bool):\n    Whether to use wandb.\nwandb_project_id (str):\n    Wandb project ID.\nsave_history (bool):\n    Whether to save the training history.\nsave_model (bool):\n    Whether to save the model.\nsave_config (bool):\n    Whether to save the training configuration.\nsave_all (bool):\n    Whether to save all.\nsave_data_details (bool):\n    Whether to save the data details.\nverbose (int):\n    Verbosity level.\n</code></pre>"},{"location":"api/lanfactory/#lanfactory.trainers.torch_mlp.TorchMLP","title":"TorchMLP","text":"<pre><code>TorchMLP(network_config=None, input_shape=10, **kwargs)\n</code></pre> <p>             Bases: <code>Module</code></p> <p>TorchMLP class.</p>"},{"location":"api/lanfactory/#lanfactory.trainers.torch_mlp.TorchMLP--arguments","title":"Arguments","text":"<pre><code>network_config (dict):\n    Network configuration.\ninput_shape (int):\n    Input shape.\n</code></pre>"},{"location":"api/lanfactory/#lanfactory.trainers.torch_mlp.TorchMLP.forward","title":"forward","text":"<pre><code>forward(x)\n</code></pre> <p>Forward pass through network.</p>"},{"location":"api/lanfactory/#lanfactory.trainers.torch_mlp.TorchMLP.forward--arguments","title":"Arguments","text":"<pre><code>x (torch.Tensor):\n    Input tensor.\n</code></pre> <p>Returns:</p> <ul> <li> <code>    torch.Tensor:</code>         \u2013          <p>Output tensor.</p> </li> </ul>"},{"location":"api/lanfactory/#lanfactory.utils","title":"lanfactory.utils","text":""},{"location":"api/lanfactory/#lanfactory.utils.save_configs","title":"save_configs","text":"<pre><code>save_configs(\nmodel_id=None,\nsave_folder=None,\nnetwork_config=None,\ntrain_config=None,\nallow_abs_path_folder_generation=True,\n)\n</code></pre> <p>Function to save the network and training configurations to a folder.</p>"},{"location":"api/lanfactory/#lanfactory.utils.save_configs--arguments","title":"Arguments","text":"<pre><code>model_id (str):\n    The id of the model.\nsave_folder (str):\n    The folder to save the configurations to.\nnetwork_config (dict):\n    The network configuration dictionary.\ntrain_config (dict):\n    The training configuration dictionary.\nallow_abs_path_folder_generation (bool):\n    If True, the folder string is treated as an absolute path.\n    If False, the folder string is treated as a relative path.\n</code></pre>"},{"location":"api/lanfactory/#lanfactory.utils.try_gen_folder","title":"try_gen_folder","text":"<pre><code>try_gen_folder(\nfolder=None, allow_abs_path_folder_generation=True\n)\n</code></pre> <p>Function to generate a folder from a string. If the folder already exists, it will not be generated.</p>"},{"location":"api/lanfactory/#lanfactory.utils.try_gen_folder--arguments","title":"Arguments","text":"<pre><code>folder (str):\n    The folder string to generate.\nallow_abs_path_folder_generation (bool):\n    If True, the folder string is treated as an absolute path.\n    If False, the folder string is treated as a relative path.\n</code></pre>"},{"location":"api/lanfactory/#lanfactory.utils.util_funs","title":"util_funs","text":""},{"location":"api/lanfactory/#lanfactory.utils.util_funs.save_configs","title":"save_configs","text":"<pre><code>save_configs(\nmodel_id=None,\nsave_folder=None,\nnetwork_config=None,\ntrain_config=None,\nallow_abs_path_folder_generation=True,\n)\n</code></pre> <p>Function to save the network and training configurations to a folder.</p>"},{"location":"api/lanfactory/#lanfactory.utils.util_funs.save_configs--arguments","title":"Arguments","text":"<pre><code>model_id (str):\n    The id of the model.\nsave_folder (str):\n    The folder to save the configurations to.\nnetwork_config (dict):\n    The network configuration dictionary.\ntrain_config (dict):\n    The training configuration dictionary.\nallow_abs_path_folder_generation (bool):\n    If True, the folder string is treated as an absolute path.\n    If False, the folder string is treated as a relative path.\n</code></pre>"},{"location":"api/lanfactory/#lanfactory.utils.util_funs.try_gen_folder","title":"try_gen_folder","text":"<pre><code>try_gen_folder(\nfolder=None, allow_abs_path_folder_generation=True\n)\n</code></pre> <p>Function to generate a folder from a string. If the folder already exists, it will not be generated.</p>"},{"location":"api/lanfactory/#lanfactory.utils.util_funs.try_gen_folder--arguments","title":"Arguments","text":"<pre><code>folder (str):\n    The folder string to generate.\nallow_abs_path_folder_generation (bool):\n    If True, the folder string is treated as an absolute path.\n    If False, the folder string is treated as a relative path.\n</code></pre>"},{"location":"api/onnx/","title":"onnx","text":""},{"location":"api/onnx/#lanfactory.onnx.transform_onnx","title":"lanfactory.onnx.transform_onnx","text":""},{"location":"api/onnx/#lanfactory.onnx.transform_onnx.transform_to_onnx","title":"transform_to_onnx","text":"<pre><code>transform_to_onnx(\nnetwork_config_file,\nstate_dict_file,\ninput_shape,\noutput_onnx_file,\n)\n</code></pre> <p>Transforms a TorchMLP model to ONNX format.</p>"},{"location":"api/onnx/#lanfactory.onnx.transform_onnx.transform_to_onnx--arguments","title":"Arguments","text":"<pre><code>network_config_file (str):\n    Path to the pickle file containing the network configuration.\nstate_dict_file (str):\n    Path to the file containing the state dictionary of the model.\ninput_shape (int):\n    The size of the input tensor for the model.\noutput_onnx_file (str):\n    Path to the output ONNX file.\n</code></pre>"},{"location":"api/onnx/#lanfactory.onnx.transform_to_onnx","title":"lanfactory.onnx.transform_to_onnx","text":"<pre><code>transform_to_onnx(\nnetwork_config_file,\nstate_dict_file,\ninput_shape,\noutput_onnx_file,\n)\n</code></pre> <p>Transforms a TorchMLP model to ONNX format.</p>"},{"location":"api/onnx/#lanfactory.onnx.transform_to_onnx--arguments","title":"Arguments","text":"<pre><code>network_config_file (str):\n    Path to the pickle file containing the network configuration.\nstate_dict_file (str):\n    Path to the file containing the state dictionary of the model.\ninput_shape (int):\n    The size of the input tensor for the model.\noutput_onnx_file (str):\n    Path to the output ONNX file.\n</code></pre>"},{"location":"api/trainers/","title":"trainers","text":""},{"location":"api/trainers/#lanfactory.trainers.DatasetTorch","title":"lanfactory.trainers.DatasetTorch","text":"<pre><code>DatasetTorch(\nfile_ids,\nbatch_size=32,\nlabel_lower_bound=None,\nlabel_upper_bound=None,\nfeatures_key=\"data\",\nlabel_key=\"labels\",\nout_framework=\"torch\",\n)\n</code></pre> <p>             Bases: <code>Dataset</code></p> <p>Dataset class for TorchMLP training.</p>"},{"location":"api/trainers/#lanfactory.trainers.DatasetTorch--arguments","title":"Arguments","text":"<pre><code>file_ids (list):\n    List of paths to the data files.\nbatch_size (int):\n    Batch size.\nlabel_lower_bound (float):\n    Lower bound for the labels.\nlabel_upper_bound (float):\n    Upper bound for the labels.\nfeatures_key (str):\n    Key for the features in the data files.\nlabel_key (str):\n    Key for the labels in the data files.\nout_framework (str):\n    Output framework.\n</code></pre>"},{"location":"api/trainers/#lanfactory.trainers.LoadTorchMLP","title":"lanfactory.trainers.LoadTorchMLP","text":"<pre><code>LoadTorchMLP(\nmodel_file_path=None,\nnetwork_config=None,\ninput_dim=None,\n)\n</code></pre> <p>Class to load TorchMLP models.</p>"},{"location":"api/trainers/#lanfactory.trainers.LoadTorchMLP--arguments","title":"Arguments","text":"<pre><code>model_file_path (str):\n    Path to the model file.\nnetwork_config (dict):\n    Network configuration.\ninput_dim (int):\n    Input dimension.\n</code></pre>"},{"location":"api/trainers/#lanfactory.trainers.LoadTorchMLPInfer","title":"lanfactory.trainers.LoadTorchMLPInfer","text":"<pre><code>LoadTorchMLPInfer(\nmodel_file_path=None,\nnetwork_config=None,\ninput_dim=None,\n)\n</code></pre> <p>Class to load TorchMLP models for inference. (This was originally useful directly for application in the HDDM toolbox).</p>"},{"location":"api/trainers/#lanfactory.trainers.LoadTorchMLPInfer--arguments","title":"Arguments","text":"<pre><code>model_file_path (str):\n    Path to the model file.\nnetwork_config (dict):\n    Network configuration.\ninput_dim (int):\n    Input dimension.\n</code></pre>"},{"location":"api/trainers/#lanfactory.trainers.LoadTorchMLPInfer.predict_on_batch","title":"predict_on_batch","text":"<pre><code>predict_on_batch(x=None)\n</code></pre> <p>Intended as function that computes trial wise log-likelihoods from a matrix input. To be used primarily through the HDDM toolbox.</p>"},{"location":"api/trainers/#lanfactory.trainers.LoadTorchMLPInfer.predict_on_batch--arguments","title":"Arguments","text":"<pre><code>x (numpy.ndarray(dtype=numpy.float32)):\n    Matrix which will be passed through the network.\n    LANs expect the matrix columns to follow a specific order.\n    When used in HDDM, x will be passed as follows.\n    The first few columns are trial wise model parameters\n    (order specified in the model_config file under the 'params' key).\n    The last two columns are filled with trial wise\n    reaction times and choices.\n    When not used via HDDM, no such restriction applies.\n</code></pre>"},{"location":"api/trainers/#lanfactory.trainers.LoadTorchMLPInfer.predict_on_batch--output","title":"Output","text":"<pre><code>numpy.ndarray(dtype = numpy.float32):\n    Output of the network. When called through HDDM,\n    this is expected as trial-wise log likelihoods\n    of a given generative model.\n</code></pre>"},{"location":"api/trainers/#lanfactory.trainers.MLPJax","title":"lanfactory.trainers.MLPJax","text":"<p>             Bases: <code>Module</code></p> <p>JaxMLP class. Arguments</p> <pre><code>layer_sizes (Sequence[int]):\n    Sequence of integers containing the sizes of the layers.\nactivations (Sequence[str]):\n    Sequence of strings containing the activation functions.\ntrain (bool):\n    Whether the model should be set to training mode or not.\ntrain_output_type (str):\n    The output type of the model during training.\n</code></pre>"},{"location":"api/trainers/#lanfactory.trainers.MLPJax.__call__","title":"__call__","text":"<pre><code>__call__(inputs)\n</code></pre> <p>Call function for the JaxMLP class. Performs forward pass through the network.</p>"},{"location":"api/trainers/#lanfactory.trainers.MLPJax.__call__--arguments","title":"Arguments","text":"<pre><code>inputs (jax.numpy.ndarray):\n    Input tensor.\n</code></pre> <p>Returns:</p> <ul> <li> <code>    jax.numpy.ndarray:</code>         \u2013          <p>Output tensor.</p> </li> </ul>"},{"location":"api/trainers/#lanfactory.trainers.MLPJax.load_state_from_file","title":"load_state_from_file","text":"<pre><code>load_state_from_file(seed=42, input_dim=6, file_path=None)\n</code></pre> <p>Loads the state dictionary from a file.</p>"},{"location":"api/trainers/#lanfactory.trainers.MLPJax.load_state_from_file--arguments","title":"Arguments","text":"<pre><code>seed (int):\n    Seed for the random number generator.\ninput_dim (int):\n    Dimension of the input tensor.\nfile_path (str):\n    Path to the file containing the state dictionary.\n</code></pre> <p>Returns:</p> <ul> <li> <code>    flax.core.frozen_dict.FrozenDict:</code>         \u2013          <p>The state dictionary.</p> </li> </ul>"},{"location":"api/trainers/#lanfactory.trainers.MLPJax.make_forward_partial","title":"make_forward_partial","text":"<pre><code>make_forward_partial(\nseed=42,\ninput_dim=6,\nstate_dict_from_file=True,\nstate=None,\nfile_path=None,\nadd_jitted=False,\n)\n</code></pre> <p>Creates a partial function for the forward pass of the network.</p>"},{"location":"api/trainers/#lanfactory.trainers.MLPJax.make_forward_partial--arguments","title":"Arguments","text":"<pre><code>seed (int):\n    Seed for the random number generator.\ninput_dim (int):\n    Dimension of the input tensor.\nstate_dict_from_file (bool):\n    Whether the state dictionary should be loaded from a file or not.\nstate (flax.core.frozen_dict.FrozenDict):\n    The state dictionary (if not loaded from file).\nfile_path (str):\n    Path to the file containing the state dictionary (if loaded from file).\nadd_jitted (bool):\n    Whether the partial function should be jitted or not.\n</code></pre> <p>Returns:</p> <ul> <li> <code>    Callable:</code>         \u2013          <p>The partial function for the forward pass of the network.</p> </li> </ul>"},{"location":"api/trainers/#lanfactory.trainers.MLPJax.setup","title":"setup","text":"<pre><code>setup()\n</code></pre> <p>Setup function for the JaxMLP class. Initializes the layers and activation functions.</p>"},{"location":"api/trainers/#lanfactory.trainers.MLPJaxFactory","title":"lanfactory.trainers.MLPJaxFactory","text":"<pre><code>MLPJaxFactory(network_config={}, train=True)\n</code></pre> <p>Factory function to create a MLPJax object. Arguments</p> <pre><code>network_config (dict):\n    Dictionary containing the network configuration.\ntrain (bool):\n    Whether the model should be trained or not.\n</code></pre> <p>Returns:</p> <ul> <li> <code>    MLPJax class initialized with the correct network configuration.</code>         \u2013          </li> </ul>"},{"location":"api/trainers/#lanfactory.trainers.ModelTrainerJaxMLP","title":"lanfactory.trainers.ModelTrainerJaxMLP","text":"<pre><code>ModelTrainerJaxMLP(\ntrain_config=None,\nmodel=None,\ntrain_dl=None,\nvalid_dl=None,\nallow_abs_path_folder_generation=False,\npin_memory=False,\nseed=None,\n)\n</code></pre>"},{"location":"api/trainers/#lanfactory.trainers.ModelTrainerJaxMLP--arguments","title":"Arguments","text":"<pre><code>train_config (dict):\n    Dictionary containing the training configuration.\nmodel (MLPJax):\n    The MLPJax model to be trained.\ntrain_dl (torch.utils.data.DataLoader):\n    The training data loader.\nvalid_dl (torch.utils.data.DataLoader):\n    The validation data loader.\nallow_abs_path_folder_generation (bool):\n    Whether the folder for the output files should be created or not.\npin_memory (bool):\n    Whether the data loader should pin memory or not.\nseed (int):\n    Seed for the random number generator.\n</code></pre> <p>Returns:</p> <ul> <li> <code>    ModelTrainerJaxMLP:</code>         \u2013          <p>The ModelTrainerJaxMLP object.</p> </li> </ul>"},{"location":"api/trainers/#lanfactory.trainers.ModelTrainerJaxMLP.__get_loss","title":"__get_loss","text":"<pre><code>__get_loss()\n</code></pre> <p>Define loss function.</p>"},{"location":"api/trainers/#lanfactory.trainers.ModelTrainerJaxMLP.__make_apply_model","title":"__make_apply_model","text":"<pre><code>__make_apply_model(train=True)\n</code></pre> <p>Compile forward pass with loss aplication</p>"},{"location":"api/trainers/#lanfactory.trainers.ModelTrainerJaxMLP.__make_update_model","title":"__make_update_model","text":"<pre><code>__make_update_model()\n</code></pre> <p>Compile gradient application</p>"},{"location":"api/trainers/#lanfactory.trainers.ModelTrainerJaxMLP.__try_wandb","title":"__try_wandb","text":"<pre><code>__try_wandb(\nwandb_project_id=\"projectid\",\nfile_id=\"fileid\",\nrun_id=\"runid\",\n)\n</code></pre> <p>Helper function to initialize wandb</p>"},{"location":"api/trainers/#lanfactory.trainers.ModelTrainerJaxMLP.__try_wandb--arguments","title":"Arguments","text":"<pre><code>wandb_project_id (str):\n    The wandb project id.\nfile_id (str):\n    The file id.\nrun_id (str):\n    The run id.\n</code></pre>"},{"location":"api/trainers/#lanfactory.trainers.ModelTrainerJaxMLP.create_train_state","title":"create_train_state","text":"<pre><code>create_train_state(rng)\n</code></pre> <p>Create initial train state</p>"},{"location":"api/trainers/#lanfactory.trainers.ModelTrainerJaxMLP.run_epoch","title":"run_epoch","text":"<pre><code>run_epoch(\nstate, train=True, verbose=1, epoch=0, max_epochs=0\n)\n</code></pre> <p>Run one epoch of training or validation Arguments</p> <pre><code>state (flax.core.frozen_dict.FrozenDict):\n    The state dictionary.\ntrain (bool):\n    Whether the model should is in training mode or not.\nverbose (int):\n    The verbosity level.\nepoch (int):\n    The current epoch.\nmax_epochs (int):\n    The maximum number of epochs.\n</code></pre> <p>Returns:</p> <ul> <li> <code>    tuple (flax.core.frozen_dict.FrozenDict, float):</code>         \u2013          <p>The state dictionary and the mean epoch loss.</p> </li> </ul>"},{"location":"api/trainers/#lanfactory.trainers.ModelTrainerJaxMLP.train_and_evaluate","title":"train_and_evaluate","text":"<pre><code>train_and_evaluate(\noutput_folder=\"data/\",\noutput_file_id=\"fileid\",\nrun_id=\"runid\",\nwandb_on=True,\nwandb_project_id=\"projectid\",\nsave_history=True,\nsave_model=True,\nsave_config=True,\nsave_all=True,\nsave_data_details=True,\nverbose=1,\n)\n</code></pre> <p>Train and evaluate JAXMLP model. Arguments</p> <pre><code>output_folder (str):\n    Path to the output folder.\noutput_file_id (str):\n    The file id.\nrun_id (str):\n    The run id.\nwandb_on (bool):\n    Whether to use wandb or not.\nwandb_project_id (str):\n    Project id for wandb.\nsave_history (bool):\n    Whether to save the training history or not.\nsave_model (bool):\n    Whether to save the model or not.\nsave_config (bool):\n    Whether to save the training configuration or not.\nsave_all (bool):\n    Whether to save all files or not.\nsave_data_details (bool):\n    Whether to save the data details or not.\nverbose (int):\n    The verbosity level.\n</code></pre> <p>Returns:</p> <ul> <li> <code>    flax.core.frozen_dict.FrozenDict:</code>         \u2013          <p>The final state dictionary (model state).</p> </li> </ul>"},{"location":"api/trainers/#lanfactory.trainers.ModelTrainerTorchMLP","title":"lanfactory.trainers.ModelTrainerTorchMLP","text":"<pre><code>ModelTrainerTorchMLP(\ntrain_config=None,\nmodel=None,\ntrain_dl=None,\nvalid_dl=None,\nallow_abs_path_folder_generation=False,\npin_memory=True,\nseed=None,\n)\n</code></pre> <pre><code>train_config (dict):\n    Training configuration.\nmodel (TorchMLP):\n    TorchMLP model.\ntrain_dl (DatasetTorch):\n    Training dataloader.\nvalid_dl (DatasetTorch):\n    Validation dataloader.\nallow_abs_path_folder_generation (bool):\n    Whether to allow absolute path folder generation.\npin_memory (bool):\n    Whether to pin memory (dataloader). Can affect speed.\nseed (int):\n    Random seed.\n</code></pre>"},{"location":"api/trainers/#lanfactory.trainers.ModelTrainerTorchMLP.train_and_evaluate","title":"train_and_evaluate","text":"<pre><code>train_and_evaluate(\noutput_folder=\"data/\",\noutput_file_id=\"fileid\",\nrun_id=\"runid\",\nwandb_on=True,\nwandb_project_id=\"projectid\",\nsave_history=True,\nsave_model=True,\nsave_config=True,\nsave_all=True,\nsave_data_details=True,\nverbose=1,\n)\n</code></pre> <p>Train and evaluate the model.</p>"},{"location":"api/trainers/#lanfactory.trainers.ModelTrainerTorchMLP.train_and_evaluate--arguments","title":"Arguments","text":"<pre><code>output_folder (str):\n    Output folder.\noutput_file_id (str):\n    Output file ID.\nrun_id (str):\n    Run ID.\nwandb_on (bool):\n    Whether to use wandb.\nwandb_project_id (str):\n    Wandb project ID.\nsave_history (bool):\n    Whether to save the training history.\nsave_model (bool):\n    Whether to save the model.\nsave_config (bool):\n    Whether to save the training configuration.\nsave_all (bool):\n    Whether to save all.\nsave_data_details (bool):\n    Whether to save the data details.\nverbose (int):\n    Verbosity level.\n</code></pre>"},{"location":"api/trainers/#lanfactory.trainers.TorchMLP","title":"lanfactory.trainers.TorchMLP","text":"<pre><code>TorchMLP(network_config=None, input_shape=10, **kwargs)\n</code></pre> <p>             Bases: <code>Module</code></p> <p>TorchMLP class.</p>"},{"location":"api/trainers/#lanfactory.trainers.TorchMLP--arguments","title":"Arguments","text":"<pre><code>network_config (dict):\n    Network configuration.\ninput_shape (int):\n    Input shape.\n</code></pre>"},{"location":"api/trainers/#lanfactory.trainers.TorchMLP.forward","title":"forward","text":"<pre><code>forward(x)\n</code></pre> <p>Forward pass through network.</p>"},{"location":"api/trainers/#lanfactory.trainers.TorchMLP.forward--arguments","title":"Arguments","text":"<pre><code>x (torch.Tensor):\n    Input tensor.\n</code></pre> <p>Returns:</p> <ul> <li> <code>    torch.Tensor:</code>         \u2013          <p>Output tensor.</p> </li> </ul>"},{"location":"api/trainers/#lanfactory.trainers.jax_mlp","title":"lanfactory.trainers.jax_mlp","text":""},{"location":"api/trainers/#lanfactory.trainers.jax_mlp.MLPJax","title":"MLPJax","text":"<p>             Bases: <code>Module</code></p> <p>JaxMLP class. Arguments</p> <pre><code>layer_sizes (Sequence[int]):\n    Sequence of integers containing the sizes of the layers.\nactivations (Sequence[str]):\n    Sequence of strings containing the activation functions.\ntrain (bool):\n    Whether the model should be set to training mode or not.\ntrain_output_type (str):\n    The output type of the model during training.\n</code></pre>"},{"location":"api/trainers/#lanfactory.trainers.jax_mlp.MLPJax.__call__","title":"__call__","text":"<pre><code>__call__(inputs)\n</code></pre> <p>Call function for the JaxMLP class. Performs forward pass through the network.</p>"},{"location":"api/trainers/#lanfactory.trainers.jax_mlp.MLPJax.__call__--arguments","title":"Arguments","text":"<pre><code>inputs (jax.numpy.ndarray):\n    Input tensor.\n</code></pre> <p>Returns:</p> <ul> <li> <code>    jax.numpy.ndarray:</code>         \u2013          <p>Output tensor.</p> </li> </ul>"},{"location":"api/trainers/#lanfactory.trainers.jax_mlp.MLPJax.load_state_from_file","title":"load_state_from_file","text":"<pre><code>load_state_from_file(seed=42, input_dim=6, file_path=None)\n</code></pre> <p>Loads the state dictionary from a file.</p>"},{"location":"api/trainers/#lanfactory.trainers.jax_mlp.MLPJax.load_state_from_file--arguments","title":"Arguments","text":"<pre><code>seed (int):\n    Seed for the random number generator.\ninput_dim (int):\n    Dimension of the input tensor.\nfile_path (str):\n    Path to the file containing the state dictionary.\n</code></pre> <p>Returns:</p> <ul> <li> <code>    flax.core.frozen_dict.FrozenDict:</code>         \u2013          <p>The state dictionary.</p> </li> </ul>"},{"location":"api/trainers/#lanfactory.trainers.jax_mlp.MLPJax.make_forward_partial","title":"make_forward_partial","text":"<pre><code>make_forward_partial(\nseed=42,\ninput_dim=6,\nstate_dict_from_file=True,\nstate=None,\nfile_path=None,\nadd_jitted=False,\n)\n</code></pre> <p>Creates a partial function for the forward pass of the network.</p>"},{"location":"api/trainers/#lanfactory.trainers.jax_mlp.MLPJax.make_forward_partial--arguments","title":"Arguments","text":"<pre><code>seed (int):\n    Seed for the random number generator.\ninput_dim (int):\n    Dimension of the input tensor.\nstate_dict_from_file (bool):\n    Whether the state dictionary should be loaded from a file or not.\nstate (flax.core.frozen_dict.FrozenDict):\n    The state dictionary (if not loaded from file).\nfile_path (str):\n    Path to the file containing the state dictionary (if loaded from file).\nadd_jitted (bool):\n    Whether the partial function should be jitted or not.\n</code></pre> <p>Returns:</p> <ul> <li> <code>    Callable:</code>         \u2013          <p>The partial function for the forward pass of the network.</p> </li> </ul>"},{"location":"api/trainers/#lanfactory.trainers.jax_mlp.MLPJax.setup","title":"setup","text":"<pre><code>setup()\n</code></pre> <p>Setup function for the JaxMLP class. Initializes the layers and activation functions.</p>"},{"location":"api/trainers/#lanfactory.trainers.jax_mlp.MLPJaxFactory","title":"MLPJaxFactory","text":"<pre><code>MLPJaxFactory(network_config={}, train=True)\n</code></pre> <p>Factory function to create a MLPJax object. Arguments</p> <pre><code>network_config (dict):\n    Dictionary containing the network configuration.\ntrain (bool):\n    Whether the model should be trained or not.\n</code></pre> <p>Returns:</p> <ul> <li> <code>    MLPJax class initialized with the correct network configuration.</code>         \u2013          </li> </ul>"},{"location":"api/trainers/#lanfactory.trainers.jax_mlp.ModelTrainerJaxMLP","title":"ModelTrainerJaxMLP","text":"<pre><code>ModelTrainerJaxMLP(\ntrain_config=None,\nmodel=None,\ntrain_dl=None,\nvalid_dl=None,\nallow_abs_path_folder_generation=False,\npin_memory=False,\nseed=None,\n)\n</code></pre>"},{"location":"api/trainers/#lanfactory.trainers.jax_mlp.ModelTrainerJaxMLP--arguments","title":"Arguments","text":"<pre><code>train_config (dict):\n    Dictionary containing the training configuration.\nmodel (MLPJax):\n    The MLPJax model to be trained.\ntrain_dl (torch.utils.data.DataLoader):\n    The training data loader.\nvalid_dl (torch.utils.data.DataLoader):\n    The validation data loader.\nallow_abs_path_folder_generation (bool):\n    Whether the folder for the output files should be created or not.\npin_memory (bool):\n    Whether the data loader should pin memory or not.\nseed (int):\n    Seed for the random number generator.\n</code></pre> <p>Returns:</p> <ul> <li> <code>    ModelTrainerJaxMLP:</code>         \u2013          <p>The ModelTrainerJaxMLP object.</p> </li> </ul>"},{"location":"api/trainers/#lanfactory.trainers.jax_mlp.ModelTrainerJaxMLP.__get_loss","title":"__get_loss","text":"<pre><code>__get_loss()\n</code></pre> <p>Define loss function.</p>"},{"location":"api/trainers/#lanfactory.trainers.jax_mlp.ModelTrainerJaxMLP.__make_apply_model","title":"__make_apply_model","text":"<pre><code>__make_apply_model(train=True)\n</code></pre> <p>Compile forward pass with loss aplication</p>"},{"location":"api/trainers/#lanfactory.trainers.jax_mlp.ModelTrainerJaxMLP.__make_update_model","title":"__make_update_model","text":"<pre><code>__make_update_model()\n</code></pre> <p>Compile gradient application</p>"},{"location":"api/trainers/#lanfactory.trainers.jax_mlp.ModelTrainerJaxMLP.__try_wandb","title":"__try_wandb","text":"<pre><code>__try_wandb(\nwandb_project_id=\"projectid\",\nfile_id=\"fileid\",\nrun_id=\"runid\",\n)\n</code></pre> <p>Helper function to initialize wandb</p>"},{"location":"api/trainers/#lanfactory.trainers.jax_mlp.ModelTrainerJaxMLP.__try_wandb--arguments","title":"Arguments","text":"<pre><code>wandb_project_id (str):\n    The wandb project id.\nfile_id (str):\n    The file id.\nrun_id (str):\n    The run id.\n</code></pre>"},{"location":"api/trainers/#lanfactory.trainers.jax_mlp.ModelTrainerJaxMLP.create_train_state","title":"create_train_state","text":"<pre><code>create_train_state(rng)\n</code></pre> <p>Create initial train state</p>"},{"location":"api/trainers/#lanfactory.trainers.jax_mlp.ModelTrainerJaxMLP.run_epoch","title":"run_epoch","text":"<pre><code>run_epoch(\nstate, train=True, verbose=1, epoch=0, max_epochs=0\n)\n</code></pre> <p>Run one epoch of training or validation Arguments</p> <pre><code>state (flax.core.frozen_dict.FrozenDict):\n    The state dictionary.\ntrain (bool):\n    Whether the model should is in training mode or not.\nverbose (int):\n    The verbosity level.\nepoch (int):\n    The current epoch.\nmax_epochs (int):\n    The maximum number of epochs.\n</code></pre> <p>Returns:</p> <ul> <li> <code>    tuple (flax.core.frozen_dict.FrozenDict, float):</code>         \u2013          <p>The state dictionary and the mean epoch loss.</p> </li> </ul>"},{"location":"api/trainers/#lanfactory.trainers.jax_mlp.ModelTrainerJaxMLP.train_and_evaluate","title":"train_and_evaluate","text":"<pre><code>train_and_evaluate(\noutput_folder=\"data/\",\noutput_file_id=\"fileid\",\nrun_id=\"runid\",\nwandb_on=True,\nwandb_project_id=\"projectid\",\nsave_history=True,\nsave_model=True,\nsave_config=True,\nsave_all=True,\nsave_data_details=True,\nverbose=1,\n)\n</code></pre> <p>Train and evaluate JAXMLP model. Arguments</p> <pre><code>output_folder (str):\n    Path to the output folder.\noutput_file_id (str):\n    The file id.\nrun_id (str):\n    The run id.\nwandb_on (bool):\n    Whether to use wandb or not.\nwandb_project_id (str):\n    Project id for wandb.\nsave_history (bool):\n    Whether to save the training history or not.\nsave_model (bool):\n    Whether to save the model or not.\nsave_config (bool):\n    Whether to save the training configuration or not.\nsave_all (bool):\n    Whether to save all files or not.\nsave_data_details (bool):\n    Whether to save the data details or not.\nverbose (int):\n    The verbosity level.\n</code></pre> <p>Returns:</p> <ul> <li> <code>    flax.core.frozen_dict.FrozenDict:</code>         \u2013          <p>The final state dictionary (model state).</p> </li> </ul>"},{"location":"api/trainers/#lanfactory.trainers.torch_mlp","title":"lanfactory.trainers.torch_mlp","text":""},{"location":"api/trainers/#lanfactory.trainers.torch_mlp.DatasetTorch","title":"DatasetTorch","text":"<pre><code>DatasetTorch(\nfile_ids,\nbatch_size=32,\nlabel_lower_bound=None,\nlabel_upper_bound=None,\nfeatures_key=\"data\",\nlabel_key=\"labels\",\nout_framework=\"torch\",\n)\n</code></pre> <p>             Bases: <code>Dataset</code></p> <p>Dataset class for TorchMLP training.</p>"},{"location":"api/trainers/#lanfactory.trainers.torch_mlp.DatasetTorch--arguments","title":"Arguments","text":"<pre><code>file_ids (list):\n    List of paths to the data files.\nbatch_size (int):\n    Batch size.\nlabel_lower_bound (float):\n    Lower bound for the labels.\nlabel_upper_bound (float):\n    Upper bound for the labels.\nfeatures_key (str):\n    Key for the features in the data files.\nlabel_key (str):\n    Key for the labels in the data files.\nout_framework (str):\n    Output framework.\n</code></pre>"},{"location":"api/trainers/#lanfactory.trainers.torch_mlp.LoadTorchMLP","title":"LoadTorchMLP","text":"<pre><code>LoadTorchMLP(\nmodel_file_path=None,\nnetwork_config=None,\ninput_dim=None,\n)\n</code></pre> <p>Class to load TorchMLP models.</p>"},{"location":"api/trainers/#lanfactory.trainers.torch_mlp.LoadTorchMLP--arguments","title":"Arguments","text":"<pre><code>model_file_path (str):\n    Path to the model file.\nnetwork_config (dict):\n    Network configuration.\ninput_dim (int):\n    Input dimension.\n</code></pre>"},{"location":"api/trainers/#lanfactory.trainers.torch_mlp.LoadTorchMLPInfer","title":"LoadTorchMLPInfer","text":"<pre><code>LoadTorchMLPInfer(\nmodel_file_path=None,\nnetwork_config=None,\ninput_dim=None,\n)\n</code></pre> <p>Class to load TorchMLP models for inference. (This was originally useful directly for application in the HDDM toolbox).</p>"},{"location":"api/trainers/#lanfactory.trainers.torch_mlp.LoadTorchMLPInfer--arguments","title":"Arguments","text":"<pre><code>model_file_path (str):\n    Path to the model file.\nnetwork_config (dict):\n    Network configuration.\ninput_dim (int):\n    Input dimension.\n</code></pre>"},{"location":"api/trainers/#lanfactory.trainers.torch_mlp.LoadTorchMLPInfer.predict_on_batch","title":"predict_on_batch","text":"<pre><code>predict_on_batch(x=None)\n</code></pre> <p>Intended as function that computes trial wise log-likelihoods from a matrix input. To be used primarily through the HDDM toolbox.</p>"},{"location":"api/trainers/#lanfactory.trainers.torch_mlp.LoadTorchMLPInfer.predict_on_batch--arguments","title":"Arguments","text":"<pre><code>x (numpy.ndarray(dtype=numpy.float32)):\n    Matrix which will be passed through the network.\n    LANs expect the matrix columns to follow a specific order.\n    When used in HDDM, x will be passed as follows.\n    The first few columns are trial wise model parameters\n    (order specified in the model_config file under the 'params' key).\n    The last two columns are filled with trial wise\n    reaction times and choices.\n    When not used via HDDM, no such restriction applies.\n</code></pre>"},{"location":"api/trainers/#lanfactory.trainers.torch_mlp.LoadTorchMLPInfer.predict_on_batch--output","title":"Output","text":"<pre><code>numpy.ndarray(dtype = numpy.float32):\n    Output of the network. When called through HDDM,\n    this is expected as trial-wise log likelihoods\n    of a given generative model.\n</code></pre>"},{"location":"api/trainers/#lanfactory.trainers.torch_mlp.ModelTrainerTorchMLP","title":"ModelTrainerTorchMLP","text":"<pre><code>ModelTrainerTorchMLP(\ntrain_config=None,\nmodel=None,\ntrain_dl=None,\nvalid_dl=None,\nallow_abs_path_folder_generation=False,\npin_memory=True,\nseed=None,\n)\n</code></pre> <pre><code>train_config (dict):\n    Training configuration.\nmodel (TorchMLP):\n    TorchMLP model.\ntrain_dl (DatasetTorch):\n    Training dataloader.\nvalid_dl (DatasetTorch):\n    Validation dataloader.\nallow_abs_path_folder_generation (bool):\n    Whether to allow absolute path folder generation.\npin_memory (bool):\n    Whether to pin memory (dataloader). Can affect speed.\nseed (int):\n    Random seed.\n</code></pre>"},{"location":"api/trainers/#lanfactory.trainers.torch_mlp.ModelTrainerTorchMLP.train_and_evaluate","title":"train_and_evaluate","text":"<pre><code>train_and_evaluate(\noutput_folder=\"data/\",\noutput_file_id=\"fileid\",\nrun_id=\"runid\",\nwandb_on=True,\nwandb_project_id=\"projectid\",\nsave_history=True,\nsave_model=True,\nsave_config=True,\nsave_all=True,\nsave_data_details=True,\nverbose=1,\n)\n</code></pre> <p>Train and evaluate the model.</p>"},{"location":"api/trainers/#lanfactory.trainers.torch_mlp.ModelTrainerTorchMLP.train_and_evaluate--arguments","title":"Arguments","text":"<pre><code>output_folder (str):\n    Output folder.\noutput_file_id (str):\n    Output file ID.\nrun_id (str):\n    Run ID.\nwandb_on (bool):\n    Whether to use wandb.\nwandb_project_id (str):\n    Wandb project ID.\nsave_history (bool):\n    Whether to save the training history.\nsave_model (bool):\n    Whether to save the model.\nsave_config (bool):\n    Whether to save the training configuration.\nsave_all (bool):\n    Whether to save all.\nsave_data_details (bool):\n    Whether to save the data details.\nverbose (int):\n    Verbosity level.\n</code></pre>"},{"location":"api/trainers/#lanfactory.trainers.torch_mlp.TorchMLP","title":"TorchMLP","text":"<pre><code>TorchMLP(network_config=None, input_shape=10, **kwargs)\n</code></pre> <p>             Bases: <code>Module</code></p> <p>TorchMLP class.</p>"},{"location":"api/trainers/#lanfactory.trainers.torch_mlp.TorchMLP--arguments","title":"Arguments","text":"<pre><code>network_config (dict):\n    Network configuration.\ninput_shape (int):\n    Input shape.\n</code></pre>"},{"location":"api/trainers/#lanfactory.trainers.torch_mlp.TorchMLP.forward","title":"forward","text":"<pre><code>forward(x)\n</code></pre> <p>Forward pass through network.</p>"},{"location":"api/trainers/#lanfactory.trainers.torch_mlp.TorchMLP.forward--arguments","title":"Arguments","text":"<pre><code>x (torch.Tensor):\n    Input tensor.\n</code></pre> <p>Returns:</p> <ul> <li> <code>    torch.Tensor:</code>         \u2013          <p>Output tensor.</p> </li> </ul>"},{"location":"api/utils/","title":"utils","text":""},{"location":"api/utils/#lanfactory.utils.save_configs","title":"lanfactory.utils.save_configs","text":"<pre><code>save_configs(\nmodel_id=None,\nsave_folder=None,\nnetwork_config=None,\ntrain_config=None,\nallow_abs_path_folder_generation=True,\n)\n</code></pre> <p>Function to save the network and training configurations to a folder.</p>"},{"location":"api/utils/#lanfactory.utils.save_configs--arguments","title":"Arguments","text":"<pre><code>model_id (str):\n    The id of the model.\nsave_folder (str):\n    The folder to save the configurations to.\nnetwork_config (dict):\n    The network configuration dictionary.\ntrain_config (dict):\n    The training configuration dictionary.\nallow_abs_path_folder_generation (bool):\n    If True, the folder string is treated as an absolute path.\n    If False, the folder string is treated as a relative path.\n</code></pre>"},{"location":"api/utils/#lanfactory.utils.try_gen_folder","title":"lanfactory.utils.try_gen_folder","text":"<pre><code>try_gen_folder(\nfolder=None, allow_abs_path_folder_generation=True\n)\n</code></pre> <p>Function to generate a folder from a string. If the folder already exists, it will not be generated.</p>"},{"location":"api/utils/#lanfactory.utils.try_gen_folder--arguments","title":"Arguments","text":"<pre><code>folder (str):\n    The folder string to generate.\nallow_abs_path_folder_generation (bool):\n    If True, the folder string is treated as an absolute path.\n    If False, the folder string is treated as a relative path.\n</code></pre>"},{"location":"api/utils/#lanfactory.utils.util_funs","title":"lanfactory.utils.util_funs","text":""},{"location":"api/utils/#lanfactory.utils.util_funs.save_configs","title":"save_configs","text":"<pre><code>save_configs(\nmodel_id=None,\nsave_folder=None,\nnetwork_config=None,\ntrain_config=None,\nallow_abs_path_folder_generation=True,\n)\n</code></pre> <p>Function to save the network and training configurations to a folder.</p>"},{"location":"api/utils/#lanfactory.utils.util_funs.save_configs--arguments","title":"Arguments","text":"<pre><code>model_id (str):\n    The id of the model.\nsave_folder (str):\n    The folder to save the configurations to.\nnetwork_config (dict):\n    The network configuration dictionary.\ntrain_config (dict):\n    The training configuration dictionary.\nallow_abs_path_folder_generation (bool):\n    If True, the folder string is treated as an absolute path.\n    If False, the folder string is treated as a relative path.\n</code></pre>"},{"location":"api/utils/#lanfactory.utils.util_funs.try_gen_folder","title":"try_gen_folder","text":"<pre><code>try_gen_folder(\nfolder=None, allow_abs_path_folder_generation=True\n)\n</code></pre> <p>Function to generate a folder from a string. If the folder already exists, it will not be generated.</p>"},{"location":"api/utils/#lanfactory.utils.util_funs.try_gen_folder--arguments","title":"Arguments","text":"<pre><code>folder (str):\n    The folder string to generate.\nallow_abs_path_folder_generation (bool):\n    If True, the folder string is treated as an absolute path.\n    If False, the folder string is treated as a relative path.\n</code></pre>"},{"location":"basic_tutorial/basic_tutorial/","title":"Installation","text":"<p>The <code>LANfactory</code> package is a light-weight convenience package for training <code>likelihood approximation networks</code> (LANs) in torch (or keras), starting from supplied training data.</p> <p>LANs, although more general in potential scope of applications, were conceived in the context of sequential sampling modeling to account for cognitive processes giving rise to choice and reaction time data in n-alternative forced choice experiments commonly encountered in the cognitive sciences.</p> <p>In this quick tutorial we will use the <code>ssms</code> package to generate our training data using such a sequential sampling model (SSM). The use of of the <code>LANfactory</code> package is in no way bound to utilize this <code>ssms</code> package.</p> In\u00a0[1]: Copied! <pre># Load necessary packages\nimport ssms\nimport lanfactory\nimport os\nimport numpy as np\nfrom copy import deepcopy\nimport torch\n</pre> # Load necessary packages import ssms import lanfactory import os import numpy as np from copy import deepcopy import torch In\u00a0[2]: Copied! <pre># MAKE CONFIGS\n\n# Initialize the generator config (for MLP LANs)\ngenerator_config = deepcopy(ssms.config.data_generator_config[\"lan\"][\"mlp\"])\n# Specify generative model (one from the list of included models mentioned above)\ngenerator_config[\"dgp_list\"] = \"angle\"\n# Specify number of parameter sets to simulate\ngenerator_config[\"n_parameter_sets\"] = 100\n# Specify how many samples a simulation run should entail\ngenerator_config[\"n_samples\"] = 1000\n# Specify folder in which to save generated data\ngenerator_config[\"output_folder\"] = \"data/lan_mlp/\"\n\n# Make model config dict\nmodel_config = ssms.config.model_config[\"angle\"]\n</pre> # MAKE CONFIGS  # Initialize the generator config (for MLP LANs) generator_config = deepcopy(ssms.config.data_generator_config[\"lan\"][\"mlp\"]) # Specify generative model (one from the list of included models mentioned above) generator_config[\"dgp_list\"] = \"angle\" # Specify number of parameter sets to simulate generator_config[\"n_parameter_sets\"] = 100 # Specify how many samples a simulation run should entail generator_config[\"n_samples\"] = 1000 # Specify folder in which to save generated data generator_config[\"output_folder\"] = \"data/lan_mlp/\"  # Make model config dict model_config = ssms.config.model_config[\"angle\"] In\u00a0[3]: Copied! <pre># MAKE DATA\n\nmy_dataset_generator = ssms.dataset_generators.data_generator(\n    generator_config=generator_config, model_config=model_config\n)\n\ntraining_data = my_dataset_generator.generate_data_training_uniform(save=True)\n</pre> # MAKE DATA  my_dataset_generator = ssms.dataset_generators.data_generator(     generator_config=generator_config, model_config=model_config )  training_data = my_dataset_generator.generate_data_training_uniform(save=True) <pre>n_cpus used:  6\nchecking:  data/lan_mlp/\nsimulation round: 1  of 10\nsimulation round: 2  of 10\nsimulation round: 3  of 10\nsimulation round: 4  of 10\nsimulation round: 5  of 10\nsimulation round: 6  of 10\nsimulation round: 7  of 10\nsimulation round: 8  of 10\nsimulation round: 9  of 10\nsimulation round: 10  of 10\nWriting to file:  data/lan_mlp/training_data_0_nbins_0_n_1000/angle/training_data_angle_ef5b9e0eb76c11eca684acde48001122.pickle\n</pre> In\u00a0[4]: Copied! <pre># MAKE DATALOADERS\n\n# List of datafiles (here only one)\nfolder_ = \"data/lan_mlp/training_data_0_nbins_0_n_1000/angle/\"\nfile_list_ = [folder_ + file_ for file_ in os.listdir(folder_)]\n\n# Training dataset\ntorch_training_dataset = lanfactory.trainers.DatasetTorch(\n    file_IDs=file_list_, batch_size=128\n)\n\ntorch_training_dataloader = torch.utils.data.DataLoader(\n    torch_training_dataset,\n    shuffle=True,\n    batch_size=None,\n    num_workers=1,\n    pin_memory=True,\n)\n\n# Validation dataset\ntorch_validation_dataset = lanfactory.trainers.DatasetTorch(\n    file_IDs=file_list_, batch_size=128\n)\n\ntorch_validation_dataloader = torch.utils.data.DataLoader(\n    torch_validation_dataset,\n    shuffle=True,\n    batch_size=None,\n    num_workers=1,\n    pin_memory=True,\n)\n</pre> # MAKE DATALOADERS  # List of datafiles (here only one) folder_ = \"data/lan_mlp/training_data_0_nbins_0_n_1000/angle/\" file_list_ = [folder_ + file_ for file_ in os.listdir(folder_)]  # Training dataset torch_training_dataset = lanfactory.trainers.DatasetTorch(     file_IDs=file_list_, batch_size=128 )  torch_training_dataloader = torch.utils.data.DataLoader(     torch_training_dataset,     shuffle=True,     batch_size=None,     num_workers=1,     pin_memory=True, )  # Validation dataset torch_validation_dataset = lanfactory.trainers.DatasetTorch(     file_IDs=file_list_, batch_size=128 )  torch_validation_dataloader = torch.utils.data.DataLoader(     torch_validation_dataset,     shuffle=True,     batch_size=None,     num_workers=1,     pin_memory=True, ) <p>Now we define two configuration dictionariers,</p> <ol> <li>The <code>network_config</code> dictionary defines the architecture and properties of the network</li> <li>The <code>train_config</code> dictionary defines properties concerning training hyperparameters</li> </ol> <p>Two examples (which we take as provided by the package, but which you can adjust according to your needs) are provided below.</p> In\u00a0[5]: Copied! <pre># SPECIFY NETWORK CONFIGS AND TRAINING CONFIGS\n\nnetwork_config = lanfactory.config.network_configs.network_config_mlp\n\nprint(\"Network config: \")\nprint(network_config)\n\ntrain_config = lanfactory.config.network_configs.train_config_mlp\n\nprint(\"Train config: \")\nprint(train_config)\n</pre> # SPECIFY NETWORK CONFIGS AND TRAINING CONFIGS  network_config = lanfactory.config.network_configs.network_config_mlp  print(\"Network config: \") print(network_config)  train_config = lanfactory.config.network_configs.train_config_mlp  print(\"Train config: \") print(train_config) <pre>Network config: \n{'layer_types': ['dense', 'dense', 'dense'], 'layer_sizes': [100, 100, 1], 'activations': ['tanh', 'tanh', 'linear'], 'loss': ['huber'], 'callbacks': ['checkpoint', 'earlystopping', 'reducelr']}\nTrain config: \n{'batch_size': 128, 'n_epochs': 10, 'optimizer': 'adam', 'learning_rate': 0.002, 'loss': 'huber', 'save_history': True, 'metrics': [&lt;keras.losses.MeanSquaredError object at 0x12c403d30&gt;, &lt;keras.losses.Huber object at 0x12c1c78e0&gt;], 'callbacks': ['checkpoint', 'earlystopping', 'reducelr']}\n</pre> <p>We can now load a network, and save the configuration files for convenience.</p> In\u00a0[6]: Copied! <pre># LOAD NETWORK\nnet = lanfactory.trainers.TorchMLP(\n    network_config=deepcopy(network_config),\n    input_shape=torch_training_dataset.input_dim,\n    save_folder=\"/data/torch_models/\",\n    generative_model_id=\"angle\",\n)\n\n# SAVE CONFIGS\nlanfactory.utils.save_configs(\n    model_id=net.model_id + \"_torch_\",\n    save_folder=\"data/torch_models/angle/\",\n    network_config=network_config,\n    train_config=train_config,\n    allow_abs_path_folder_generation=True,\n)\n</pre> # LOAD NETWORK net = lanfactory.trainers.TorchMLP(     network_config=deepcopy(network_config),     input_shape=torch_training_dataset.input_dim,     save_folder=\"/data/torch_models/\",     generative_model_id=\"angle\", )  # SAVE CONFIGS lanfactory.utils.save_configs(     model_id=net.model_id + \"_torch_\",     save_folder=\"data/torch_models/angle/\",     network_config=network_config,     train_config=train_config,     allow_abs_path_folder_generation=True, ) <pre>tanh\nlinear\n</pre> <p>To finally train the network we supply our network, the dataloaders and training config to the <code>ModelTrainerTorchMLP</code> class, from <code>lanfactory.trainers</code>.</p> In\u00a0[9]: Copied! <pre># TRAIN MODEL\nmodel_trainer.train_model(save_history=True, save_model=True, verbose=0)\n</pre> # TRAIN MODEL model_trainer.train_model(save_history=True, save_model=True, verbose=0) <pre>Epoch took 0 / 10,  took 11.54538607597351 seconds\nepoch 0 / 10, validation_loss: 0.3431\nEpoch took 1 / 10,  took 13.032279014587402 seconds\nepoch 1 / 10, validation_loss: 0.2732\nEpoch took 2 / 10,  took 12.421074867248535 seconds\nepoch 2 / 10, validation_loss: 0.1941\nEpoch took 3 / 10,  took 12.097641229629517 seconds\nepoch 3 / 10, validation_loss: 0.2028\nEpoch took 4 / 10,  took 12.030233144760132 seconds\nepoch 4 / 10, validation_loss: 0.184\nEpoch took 5 / 10,  took 12.695374011993408 seconds\nepoch 5 / 10, validation_loss: 0.1433\nEpoch took 6 / 10,  took 12.177874326705933 seconds\nepoch 6 / 10, validation_loss: 0.1115\nEpoch took 7 / 10,  took 11.908828258514404 seconds\nepoch 7 / 10, validation_loss: 0.1084\nEpoch took 8 / 10,  took 12.066670179367065 seconds\nepoch 8 / 10, validation_loss: 0.0864\nEpoch took 9 / 10,  took 12.37562108039856 seconds\nepoch 9 / 10, validation_loss: 0.07484\nSaving training history\nSaving model state dict\nTraining finished successfully...\n</pre> <p>The <code>LANfactory</code> provides some convenience functions to use networks for inference after training. We can load a model using the <code>LoadTorchMLPInfer</code> class, which then allows us to run fast inference via either a direct call, which expects a <code>torch.tensor</code> as input, or the <code>predict_on_batch</code> method, which expects a <code>numpy.array</code> of <code>dtype</code>, <code>np.float32</code>.</p> In\u00a0[10]: Copied! <pre>network_path_list = os.listdir(\"data/torch_models/angle\")\nnetwork_file_path = [\n    \"data/torch_models/angle/\" + file_\n    for file_ in network_path_list\n    if \"state_dict\" in file_\n][0]\n\nnetwork = lanfactory.trainers.LoadTorchMLPInfer(\n    model_file_path=network_file_path,\n    network_config=network_config,\n    input_dim=torch_training_dataset.input_dim,\n)\n</pre> network_path_list = os.listdir(\"data/torch_models/angle\") network_file_path = [     \"data/torch_models/angle/\" + file_     for file_ in network_path_list     if \"state_dict\" in file_ ][0]  network = lanfactory.trainers.LoadTorchMLPInfer(     model_file_path=network_file_path,     network_config=network_config,     input_dim=torch_training_dataset.input_dim, ) <pre>tanh\nlinear\n</pre> In\u00a0[14]: Copied! <pre># Two ways to call the network\n\n# Direct call --&gt; need tensor input\ndirect_out = network(\n    torch.from_numpy(np.array([1, 1.5, 0.5, 1.0, 0.1, 0.65, 1], dtype=np.float32))\n)\nprint(\"direct call out: \", direct_out)\n\n# predict_on_batch method\npredict_on_batch_out = network.predict_on_batch(\n    np.array([1, 1.5, 0.5, 1.0, 0.1, 0.65, 1], dtype=np.float32)\n)\nprint(\"predict_on_batch out: \", predict_on_batch_out)\n</pre> # Two ways to call the network  # Direct call --&gt; need tensor input direct_out = network(     torch.from_numpy(np.array([1, 1.5, 0.5, 1.0, 0.1, 0.65, 1], dtype=np.float32)) ) print(\"direct call out: \", direct_out)  # predict_on_batch method predict_on_batch_out = network.predict_on_batch(     np.array([1, 1.5, 0.5, 1.0, 0.1, 0.65, 1], dtype=np.float32) ) print(\"predict_on_batch out: \", predict_on_batch_out) <pre>direct call out:  tensor([-16.4997])\npredict_on_batch out:  [-16.499687]\n</pre> In\u00a0[40]: Copied! <pre>import pandas as pd\nimport matplotlib.pyplot as plt\n\ndata = pd.DataFrame(\n    np.zeros((2000, 7), dtype=np.float32),\n    columns=[\"v\", \"a\", \"z\", \"t\", \"theta\", \"rt\", \"choice\"],\n)\ndata[\"v\"] = 0.5\ndata[\"a\"] = 0.75\ndata[\"z\"] = 0.5\ndata[\"t\"] = 0.2\ndata[\"theta\"] = 0.1\ndata[\"rt\"].iloc[:1000] = np.linspace(5, 0, 1000)\ndata[\"rt\"].iloc[1000:] = np.linspace(0, 5, 1000)\ndata[\"choice\"].iloc[:1000] = -1\ndata[\"choice\"].iloc[1000:] = 1\n\n# Network predictions\npredict_on_batch_out = network.predict_on_batch(data.values.astype(np.float32))\n\n# Simulations\nfrom ssms.basic_simulators import simulator\n\nsim_out = simulator(model=\"angle\", theta=data.values[0, :-2], n_samples=2000)\n</pre> import pandas as pd import matplotlib.pyplot as plt  data = pd.DataFrame(     np.zeros((2000, 7), dtype=np.float32),     columns=[\"v\", \"a\", \"z\", \"t\", \"theta\", \"rt\", \"choice\"], ) data[\"v\"] = 0.5 data[\"a\"] = 0.75 data[\"z\"] = 0.5 data[\"t\"] = 0.2 data[\"theta\"] = 0.1 data[\"rt\"].iloc[:1000] = np.linspace(5, 0, 1000) data[\"rt\"].iloc[1000:] = np.linspace(0, 5, 1000) data[\"choice\"].iloc[:1000] = -1 data[\"choice\"].iloc[1000:] = 1  # Network predictions predict_on_batch_out = network.predict_on_batch(data.values.astype(np.float32))  # Simulations from ssms.basic_simulators import simulator  sim_out = simulator(model=\"angle\", theta=data.values[0, :-2], n_samples=2000) In\u00a0[56]: Copied! <pre># Plot network predictions\nplt.plot(\n    data[\"rt\"] * data[\"choice\"],\n    np.exp(predict_on_batch_out),\n    color=\"black\",\n    label=\"network\",\n)\n\n# Plot simulations\nplt.hist(\n    sim_out[\"rts\"] * sim_out[\"choices\"],\n    bins=30,\n    histtype=\"step\",\n    label=\"simulations\",\n    color=\"blue\",\n    density=True,\n)\nplt.legend()\nplt.title(\"SSM likelihood\")\nplt.xlabel(\"rt\")\nplt.ylabel(\"likelihod\")\n</pre> # Plot network predictions plt.plot(     data[\"rt\"] * data[\"choice\"],     np.exp(predict_on_batch_out),     color=\"black\",     label=\"network\", )  # Plot simulations plt.hist(     sim_out[\"rts\"] * sim_out[\"choices\"],     bins=30,     histtype=\"step\",     label=\"simulations\",     color=\"blue\",     density=True, ) plt.legend() plt.title(\"SSM likelihood\") plt.xlabel(\"rt\") plt.ylabel(\"likelihod\") Out[56]: <pre>Text(0, 0.5, 'likelihod')</pre> <p>We hope this package may be helpful in case you attempt to train LANs for your own research.</p>"},{"location":"basic_tutorial/basic_tutorial/#quick-start","title":"Quick Start\u00b6","text":""},{"location":"basic_tutorial/basic_tutorial/#install","title":"Install\u00b6","text":"<p>To install the <code>ssms</code> package type,</p> <p><code>pip install git+https://github.com/AlexanderFengler/ssm_simulators</code></p> <p>To install the <code>LANfactory</code> package type,</p> <p><code>pip install git+https://github.com/AlexanderFengler/LANfactory</code></p> <p>Necessary dependency should be installed automatically in the process.</p>"},{"location":"basic_tutorial/basic_tutorial/#basic-tutorial","title":"Basic Tutorial\u00b6","text":""},{"location":"basic_tutorial/basic_tutorial/#generate-training-data","title":"Generate Training Data\u00b6","text":"<p>First we need to generate some training data. As mentioned above we will do so using the <code>ssms</code> python package, however without delving into a detailed explanation of this package. Please refer to the [basic ssms tutorial] (https://github.com/AlexanderFengler/ssm_simulators) in case you want to learn more.</p>"},{"location":"basic_tutorial/basic_tutorial/#prepare-for-training","title":"Prepare for Training\u00b6","text":"<p>Next we set up dataloaders for training with pytorch. The <code>LANfactory</code> uses custom dataloaders, taking into account particularities of the expected training data. Specifically, we expect to receive a bunch of training data files (the present example generates only one), where each file hosts a large number of training examples. So we want to define a dataloader which spits out batches from data with a specific training data file, and keeps checking when to load in a new file. The way this is implemented here, is via the <code>DatasetTorch</code> class in <code>lanfactory.trainers</code>, which inherits from <code>torch.utils.data.Dataset</code> and prespecifies a <code>batch_size</code>. Finally this is supplied to a <code>DataLoader</code>, for which we keep the <code>batch_size</code> argument at 0.</p> <p>The <code>DatasetTorch</code> class is then called as an iterator via the DataLoader and takes care of batching as well as file loading internally.</p> <p>You may choose your own way of defining the <code>DataLoader</code> classes, downstream you are simply expected to supply one.</p>"},{"location":"basic_tutorial/basic_tutorial/#load-model-for-inference-and-call","title":"Load Model for Inference and Call\u00b6","text":""},{"location":"basic_tutorial/basic_tutorial/#a-peek-into-the-first-passage-distribution-computed-by-the-network","title":"A peek into the first passage distribution computed by the network\u00b6","text":"<p>We can compare the learned likelihood function in our <code>network</code> with simulation data from the underlying generative model. For this purpose we recruit the <code>ssms</code> package again.</p>"},{"location":"basic_tutorial/basic_tutorial/#end","title":"END\u00b6","text":""}]}